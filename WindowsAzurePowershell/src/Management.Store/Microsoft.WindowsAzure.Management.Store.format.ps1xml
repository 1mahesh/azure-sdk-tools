<?xml version="1.0" encoding="utf-8" ?>
<Configuration>
  <ViewDefinitions>
    <View>
      <Name>Microsoft.WindowsAzure.Management.Store.Model.WindowsAzureOffer</Name>
      <ViewSelectedBy>
        <TypeName>Microsoft.WindowsAzure.Management.Store.Model.WindowsAzureOffer</TypeName>
      </ViewSelectedBy>
      <TableControl>
        <TableHeaders>
          <TableColumnHeader>
            <Label>Name</Label>
            <Width>80</Width>
          </TableColumnHeader>
          <TableColumnHeader>
            <Label>Provider</Label>
            <Width>50</Width>
          </TableColumnHeader>
          <TableColumnHeader>
          <Label>Plans</Label>
            <Width>100</Width>
          </TableColumnHeader>
        </TableHeaders>
        <TableRowEntries>
          <TableRowEntry>
            <TableColumnItems>
              <TableColumnItem>
                <ScriptBlock>$_.Name</ScriptBlock>
              </TableColumnItem>
              <TableColumnItem>
                <ScriptBlock>$_.ProviderName</ScriptBlock>
              </TableColumnItem>
              <TableColumnItem>
                <ScriptBlock>
                  $plans = @()
                  foreach ($plan in $_.Plans)
                  {
                    $plans += $plan.PlanIdentifier
                  }
                  $plans
                </ScriptBlock>
              </TableColumnItem>
            </TableColumnItems>
          </TableRowEntry>
        </TableRowEntries>
      </TableControl>
    </View>
    <View>
      <Name>Microsoft.WindowsAzure.Management.Store.Model.AddOn</Name>
      <ViewSelectedBy>
        <TypeName>Microsoft.WindowsAzure.Management.Store.Model.AddOn</TypeName>
      </ViewSelectedBy>
      <ListControl>
        <ListEntries>
          <ListEntry>
            <ListItems>
              <ListItem>
                <Label>Name</Label>
                <PropertyName>Name</PropertyName>
              </ListItem>
              <ListItem>
                <Label>Provider</Label>
                <PropertyName>Provider</PropertyName>
              </ListItem>
              <ListItem>
                <Label>Type</Label>
                <PropertyName>Type</PropertyName>
              </ListItem>
              <ListItem>
                <Label>Plan</Label>
                <PropertyName>Plan</PropertyName>
              </ListItem>
              <ListItem>
                <Label>Location</Label>
                <PropertyName>Location</PropertyName>
              </ListItem>
              <ListItem>
                <Label>SchemaVersion</Label>
                <PropertyName>SchemaVersion</PropertyName>
              </ListItem>
              <ListItem>
                <Label>State</Label>
                <PropertyName>State</PropertyName>
              </ListItem>
              <ListItem>
                <Label>OperationStatus</Label>
                <ScriptBlock>
                  $format = "{0}{2, -7}: {3}{0}{4, -7}: {5}"
                  $objects = @("`r`n", "`t", "Type", $_.OperationStatus.Type, "Result", $_.OperationStatus.Result)
                  if ($_.OperationStatus.Error -ne $null)
                  {
                    $format += "{0}{6, -7}:{0}{1}{7, -9}: {8}{0}{1}{9, -9}: {10}"
                    $objects += @("Error", "HttpCode", $_.OperationStatus.Error.HttpCode, "Message", $_.OperationStatus.Error.Message)
                  }
                  [string]::Format($format, $objects)
                </ScriptBlock>
              </ListItem>
              <ListItem>
                <Label>OutputItems</Label>
                <ScriptBlock>
                  $format = ""
                  $objects = @("`r`n")
                  $max = 0
                  foreach ($outputItem in $_.OutputItems)
                  {
                    if ($outputItem.Key.Length -gt $max)
                    {
                      $max = $outputItem.Key.Length
                    }
                  }

                  $max++

                  foreach ($outputItem in $_.OutputItems)
                  {
                    # Add key
                    $format += "{0}{" + $objects.Count + ",-" + $max + "}"
                    $objects += $outputItem.Key

                    # Add value
                    $format += ": {" + $objects.Count + "}"
                    $value = $outputItem.Value
                    if ($value.Length -gt 80)
                    {
                      $value = $value.Substring(0, 80)
                      $value += "..."
                    }
                    $objects += $value
                  }
                  [string]::Format($format, $objects)
                </ScriptBlock>
              </ListItem>
              <ListItem>
                <Label>UsageMeters</Label>
                <ScriptBlock>
                  $format = ""
                  $objects = @("`r`n")
                  $count = 0
                  foreach ($usageMeter in $_.UsageMeters)
                  {
                    # Add Name
                    $format += "{0}{" + $objects.Count + ",-9}"
                    $objects += "Name"
                    $format += ": {" + $objects.Count + "}"
                    $objects += $usageMeter.Name

                    # Add Unit
                    $format += "{0}{" + $objects.Count + ",-9}"
                    $objects += "Unit"
                    $format += ": {" + $objects.Count + "}"
                    $objects += $usageMeter.Unit

                    # Add Included
                    $format += "{0}{" + $objects.Count + ",-9}"
                    $objects += "Included"
                    $format += ": {" + $objects.Count + "}"
                    $included = $usageMeter.Included
                    if ($included.Length -gt 80)
                    {
                      $included = $included.Substring(0, 80)
                      $included += "..."
                    }
                    $objects += $included

                    # Add Used
                    $format += "{0}{" + $objects.Count + ",-9}"
                    $objects += "Used"
                    $format += ": {" + $objects.Count + "}"
                    $used = $usageMeter.Used
                    if ($used.Length -gt 80)
                    {
                      $used = $used.Substring(0, 80)
                      $used += "..."
                    }
                    $objects += $used

                    if ($count++ -lt ($_.UsageMeters.Count - 1))
                    {
                      # Add separator
                      $format += "{0}"
                    }
                  }
                  [string]::Format($format, $objects)
                </ScriptBlock>
              </ListItem>
            </ListItems>
          </ListEntry>
        </ListEntries>
      </ListControl>
    </View>
  </ViewDefinitions>
</Configuration>