<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CompleteMessage" xml:space="preserve">
    <value>Complete</value>
  </data>
  <data name="InvalidOrEmptyArgumentMessage" xml:space="preserve">
    <value>{0} is invalid or empty</value>
  </data>
  <data name="InvalidWebsite" xml:space="preserve">
    <value>The website {0} was not found. Please specify a valid website name.</value>
  </data>
  <data name="PortalInstructions" xml:space="preserve">
    <value>You must create your first web site using the Windows Azure portal.
Please follow these steps in the portal:
1. At the bottom of the page, click on New &gt; Web Site &gt; Quick Create
2. Type {0} in the URL field
3. Click on "Create Web Site"
4. Once the site has been created, click on the site name
5. Click on "Set up Git publishing" or "Reset deployment credentials" and setup a publishing username and password. Use those credentials for all new websites you create.</value>
  </data>
  <data name="RemoveWebsiteWarning" xml:space="preserve">
    <value>Are you sure you want to remove the website "{0}"</value>
  </data>
  <data name="ShouldProcessCaption" xml:space="preserve">
    <value>Confirm</value>
  </data>
  <data name="WebsiteSufixUrl" xml:space="preserve">
    <value>Workspaces/WebsiteExtension/Website/{0}/dashboard/</value>
  </data>
  <data name="InvalidGitCredentials" xml:space="preserve">
    <value>You must create your git publishing credentials using the Windows Azure portal.
Please follow these steps in the portal:
1. On the left side open "Web Sites"
2. Click on any website
3. Choose "Setup Git Publishing" or "Reset deployment credentials"
4. Back in the PowerShell window, rerun this command by typing "New-AzureWebSite {site name} -Git -PublishingUsername {username}
Launch portal now?</value>
  </data>
  <data name="MultiplePublishingUsernames" xml:space="preserve">
    <value>Multiple possible publishing users. Please go to the Portal and use the listed deployment user, or click 'set/reset deployment credentials' to set up a new user account, then reurn this cmdlet and specify PublishingUsername.</value>
  </data>
  <data name="NeedPublishingUsernames" xml:space="preserve">
    <value>A publishing username is required. Please specify one using the argument PublishingUsername.</value>
  </data>
  <data name="GitNotFound" xml:space="preserve">
    <value>Git not found. Please install git and place it in your command line path.</value>
  </data>
  <data name="PortalInstructionsGit" xml:space="preserve">
    <value>6. Back in the console window, rerun this command by typing "New-AzureWebsite &lt;site name&gt; -Git"</value>
  </data>
  <data name="CannotFind" xml:space="preserve">
    <value>Cannot find {0} with name {1}.</value>
  </data>
  <data name="WebsiteAlreadyExists" xml:space="preserve">
    <value>WebSite with given name {0} already exists in the specified Subscription and Webspace.</value>
  </data>
  <data name="WebsiteAlreadyExistsReplacement" xml:space="preserve">
    <value>WebSite with given name {0} already exists in the specified Subscription and Location.</value>
  </data>
  <data name="InvalidDeployment" xml:space="preserve">
    <value>Deployment with {0} does not exist</value>
  </data>
  <data name="RepositoryNotSetup" xml:space="preserve">
    <value>Repository is not setup. You need to pass a valid site name.</value>
  </data>
  <data name="RedeployCommit" xml:space="preserve">
    <value>Reploy deployment with {0} Id ?</value>
  </data>
  <data name="WebsiteRepositoryAlreadyExists" xml:space="preserve">
    <value>Site {0} already has repository created for it.</value>
  </data>
  <data name="LinkAlreadyEstablished" xml:space="preserve">
    <value>Link already established</value>
  </data>
  <data name="NoDefaultSubscriptionMessage" xml:space="preserve">
    <value>There is no default subscription set, please set a default subscription by running Set-AzureSubscription -Default &lt;subscription name&gt;</value>
  </data>
  <data name="DefaultHostnamesValidation" xml:space="preserve">
    <value>There are no hostnames which could be used for validation.</value>
  </data>
  <data name="InvalidHostnameValidation" xml:space="preserve">
    <value>The specified hostname does not exist. Please specify a valid hostname for the site.</value>
  </data>
</root>