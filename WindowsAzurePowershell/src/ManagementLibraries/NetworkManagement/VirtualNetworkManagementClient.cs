// 
// Copyright (c) Microsoft.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Microsoft.WindowsAzure.Management.VirtualNetworks;
using Microsoft.WindowsAzure.Management.VirtualNetworks.Models;

namespace Microsoft.WindowsAzure.Management.VirtualNetworks.Models
{
    public partial class ClientRootCertificateCreateParameters
    {
        private string _certificate;
        
        /// <summary>
        /// The new client root certificate to upload, represented as a hex
        /// encoded string
        /// </summary>
        public string Certificate
        {
            get { return this._certificate; }
            set { this._certificate = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// ClientRootCertificateCreateParameters class.
        /// </summary>
        public ClientRootCertificateCreateParameters()
        {
        }
    }
    
    /// <summary>
    /// A standard storage response including an HTTP status code and request
    /// ID.
    /// </summary>
    public partial class ClientRootCertificateGetResponse : OperationResponse
    {
        private string _certificate;
        
        /// <summary>
        /// The current client root certificate for the network gateway
        /// </summary>
        public string Certificate
        {
            get { return this._certificate; }
            set { this._certificate = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ClientRootCertificateGetResponse
        /// class.
        /// </summary>
        public ClientRootCertificateGetResponse()
        {
        }
    }
    
    /// <summary>
    /// The response to the list client root certificates request
    /// </summary>
    public partial class ClientRootCertificateListResponse : OperationResponse, IEnumerable<ClientRootCertificateListResponse.ClientRootCertificate>
    {
        private IList<ClientRootCertificateListResponse.ClientRootCertificate> _clientRootCertificates;
        
        /// <summary>
        /// The list of client root certificates
        /// </summary>
        public IList<ClientRootCertificateListResponse.ClientRootCertificate> ClientRootCertificates
        {
            get { return this._clientRootCertificates; }
            set { this._clientRootCertificates = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ClientRootCertificateListResponse
        /// class.
        /// </summary>
        public ClientRootCertificateListResponse()
        {
            this._clientRootCertificates = new List<ClientRootCertificateListResponse.ClientRootCertificate>();
        }
        
        /// <summary>
        /// Gets the sequence of ClientRootCertificates.
        /// </summary>
        public IEnumerator<ClientRootCertificateListResponse.ClientRootCertificate> GetEnumerator()
        {
            return this.ClientRootCertificates.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of ClientRootCertificates.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
        
        public partial class ClientRootCertificate
        {
            private DateTime _expirationTime;
            
            /// <summary>
            /// Specifies the time that the certificate will expire.
            /// </summary>
            public DateTime ExpirationTime
            {
                get { return this._expirationTime; }
                set { this._expirationTime = value; }
            }
            
            private string _subject;
            
            /// <summary>
            /// Specifies the distinguished name of the certificate issuer.
            /// </summary>
            public string Subject
            {
                get { return this._subject; }
                set { this._subject = value; }
            }
            
            private string _thumbprint;
            
            /// <summary>
            /// Specifies the thumbprint of the certificate.
            /// </summary>
            public string Thumbprint
            {
                get { return this._thumbprint; }
                set { this._thumbprint = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the ClientRootCertificate class.
            /// </summary>
            public ClientRootCertificate()
            {
            }
        }
    }
    
    /// <summary>
    /// The parameters for the Connect, Disconnect, or Test request
    /// </summary>
    public partial class GatewayConnectDisconnectOrTestParameters
    {
        private GatewayConnectionUpdateOperation _operation;
        
        /// <summary>
        /// Required. Specifies the operation to perform on the connection. Can
        /// be set to Connect, Disconnect or Test to connect to a local
        /// network, disconnect from a local network, or test the gateway’s
        /// connection to a local network site.
        /// </summary>
        public GatewayConnectionUpdateOperation Operation
        {
            get { return this._operation; }
            set { this._operation = value; }
        }
        
        private string _iPAddress;
        
        /// <summary>
        /// Required if operation is set to Test; otherwise not used. Specifies
        /// the IP address of the target local network site with which the
        /// gateway will test connectivity.
        /// </summary>
        public string IPAddress
        {
            get { return this._iPAddress; }
            set { this._iPAddress = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// GatewayConnectDisconnectOrTestParameters class.
        /// </summary>
        public GatewayConnectDisconnectOrTestParameters()
        {
        }
    }
    
    /// <summary>
    /// Specifies the operation to perform on the connection. Can be set to
    /// Connect, Disconnect or Test to connect to a local network, disconnect
    /// from a local network, or test the gateway’s connection to a local
    /// network site.
    /// </summary>
    public enum GatewayConnectionUpdateOperation
    {
        Connect = 0,
        
        Disconnect = 1,
        
        Test = 2,
    }
    
    public enum GatewayConnectivityState
    {
        Connected = 0,
        
        Connecting = 1,
        
        NotConnected = 2,
    }
    
    /// <summary>
    /// The parameters to the Gateway Create request
    /// </summary>
    public partial class GatewayCreateParameters
    {
        private GatewayType _gatewayType;
        
        /// <summary>
        /// The routing type for this virtual network gateway.
        /// </summary>
        public GatewayType GatewayType
        {
            get { return this._gatewayType; }
            set { this._gatewayType = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the GatewayCreateParameters class.
        /// </summary>
        public GatewayCreateParameters()
        {
        }
    }
    
    /// <summary>
    /// A management event for the virtual network gateway
    /// </summary>
    public partial class GatewayEvent
    {
        private DateTime _timestamp;
        
        /// <summary>
        /// The date and time when the event occurred
        /// </summary>
        public DateTime Timestamp
        {
            get { return this._timestamp; }
            set { this._timestamp = value; }
        }
        
        private string _id;
        
        /// <summary>
        /// The event ID
        /// </summary>
        public string Id
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private string _message;
        
        /// <summary>
        /// The event message
        /// </summary>
        public string Message
        {
            get { return this._message; }
            set { this._message = value; }
        }
        
        private string _data;
        
        /// <summary>
        /// Additional data associated with this event
        /// </summary>
        public string Data
        {
            get { return this._data; }
            set { this._data = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the GatewayEvent class.
        /// </summary>
        public GatewayEvent()
        {
        }
    }
    
    /// <summary>
    /// The parameters to the Generate VPN Client Package request.
    /// </summary>
    public partial class GatewayGenerateVpnClientPackageParameters
    {
        private GatewayProcessorArchitecture _processorArchitecture;
        
        /// <summary>
        /// The client processor architecture.
        /// </summary>
        public GatewayProcessorArchitecture ProcessorArchitecture
        {
            get { return this._processorArchitecture; }
            set { this._processorArchitecture = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// GatewayGenerateVpnClientPackageParameters class.
        /// </summary>
        public GatewayGenerateVpnClientPackageParameters()
        {
        }
    }
    
    /// <summary>
    /// The vendor, platform, and os family ofthe requested device
    /// configuration script.
    /// </summary>
    public partial class GatewayGetDeviceConfigurationScriptParameters
    {
        private string _vendor;
        
        /// <summary>
        /// The name of the device vendor
        /// </summary>
        public string Vendor
        {
            get { return this._vendor; }
            set { this._vendor = value; }
        }
        
        private string _platform;
        
        /// <summary>
        /// The device platform
        /// </summary>
        public string Platform
        {
            get { return this._platform; }
            set { this._platform = value; }
        }
        
        private string _oSFamily;
        
        /// <summary>
        /// The device OS Family
        /// </summary>
        public string OSFamily
        {
            get { return this._oSFamily; }
            set { this._oSFamily = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// GatewayGetDeviceConfigurationScriptParameters class.
        /// </summary>
        public GatewayGetDeviceConfigurationScriptParameters()
        {
        }
    }
    
    /// <summary>
    /// The configuration script returned from the get device configuration
    /// script request
    /// </summary>
    public partial class GatewayGetDeviceConfigurationScriptResponse : OperationResponse
    {
        private string _configurationScript;
        
        /// <summary>
        /// The requested configuration script for the local network device
        /// </summary>
        public string ConfigurationScript
        {
            get { return this._configurationScript; }
            set { this._configurationScript = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// GatewayGetDeviceConfigurationScriptResponse class.
        /// </summary>
        public GatewayGetDeviceConfigurationScriptResponse()
        {
        }
    }
    
    /// <summary>
    /// The response body contains the status of the specified asynchronous
    /// operation, indicating whether it has succeeded, is inprogress, or has
    /// failed. Note that this status is distinct from the HTTP status code
    /// returned for the Get Operation Status operation itself.  If the
    /// asynchronous operation succeeded, the response body includes the HTTP
    /// status code for the successful request.  If the asynchronous operation
    /// failed, the response body includes the HTTP status code for the failed
    /// request, and also includes error information regarding the failure.
    /// </summary>
    public partial class GatewayGetOperationStatusResponse : OperationResponse
    {
        private string _id;
        
        /// <summary>
        /// The request ID of the asynchronous request. This value is returned
        /// in the x-ms-request-id response header of the asynchronous request.
        /// </summary>
        public string Id
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private GatewayOperationStatus _status;
        
        /// <summary>
        /// The status of the asynchronous request.
        /// </summary>
        public GatewayOperationStatus Status
        {
            get { return this._status; }
            set { this._status = value; }
        }
        
        private HttpStatusCode _httpStatusCode;
        
        /// <summary>
        /// The HTTP status code for the asynchronous request.
        /// </summary>
        public HttpStatusCode HttpStatusCode
        {
            get { return this._httpStatusCode; }
            set { this._httpStatusCode = value; }
        }
        
        private GatewayGetOperationStatusResponse.ErrorDetails _error;
        
        /// <summary>
        /// If the asynchronous operation failed, the response body includes
        /// the HTTP status code for the failed request, and also includes
        /// error information regarding the failure.
        /// </summary>
        public GatewayGetOperationStatusResponse.ErrorDetails Error
        {
            get { return this._error; }
            set { this._error = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the GatewayGetOperationStatusResponse
        /// class.
        /// </summary>
        public GatewayGetOperationStatusResponse()
        {
        }
        
        /// <summary>
        /// If the asynchronous operation failed, the response body includes
        /// the HTTP status code for the failed request, and also includes
        /// error information regarding the failure.
        /// </summary>
        public partial class ErrorDetails
        {
            private string _code;
            
            /// <summary>
            /// The management service error code returned if the asynchronous
            /// request failed.
            /// </summary>
            public string Code
            {
                get { return this._code; }
                set { this._code = value; }
            }
            
            private string _message;
            
            /// <summary>
            /// The management service error message returned if the
            /// asynchronous request failed.
            /// </summary>
            public string Message
            {
                get { return this._message; }
                set { this._message = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the ErrorDetails class.
            /// </summary>
            public ErrorDetails()
            {
            }
        }
    }
    
    /// <summary>
    /// A standard storage response including an HTTP status code and request
    /// ID.
    /// </summary>
    public partial class GatewayGetResponse : OperationResponse
    {
        private string _state;
        
        /// <summary>
        /// The provisioning state of the virtual network gateway
        /// </summary>
        public string State
        {
            get { return this._state; }
            set { this._state = value; }
        }
        
        private string _vipAddress;
        
        /// <summary>
        /// The virtual IP address for this virtual network gateway
        /// </summary>
        public string VipAddress
        {
            get { return this._vipAddress; }
            set { this._vipAddress = value; }
        }
        
        private GatewayEvent _lastEvent;
        
        /// <summary>
        /// The last recorded event for this virtual network gateway
        /// </summary>
        public GatewayEvent LastEvent
        {
            get { return this._lastEvent; }
            set { this._lastEvent = value; }
        }
        
        private GatewayType _gatewayType;
        
        /// <summary>
        /// The type of gateway routing used for this virtual network
        /// </summary>
        public GatewayType GatewayType
        {
            get { return this._gatewayType; }
            set { this._gatewayType = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the GatewayGetResponse class.
        /// </summary>
        public GatewayGetResponse()
        {
        }
    }
    
    /// <summary>
    /// The response to the get shared key request
    /// </summary>
    public partial class GatewayGetSharedKeyResponse : OperationResponse
    {
        private string _sharedKey;
        
        /// <summary>
        /// Contains the shared key used by the gateway to authenticate
        /// connections to sites on a virtual network
        /// </summary>
        public string SharedKey
        {
            get { return this._sharedKey; }
            set { this._sharedKey = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the GatewayGetSharedKeyResponse class.
        /// </summary>
        public GatewayGetSharedKeyResponse()
        {
        }
    }
    
    /// <summary>
    /// The response to a ListConnections request to a Virtual Network Gateway
    /// </summary>
    public partial class GatewayListConnectionsResponse : OperationResponse, IEnumerable<GatewayListConnectionsResponse.GatewayConnection>
    {
        private IList<GatewayListConnectionsResponse.GatewayConnection> _connections;
        
        /// <summary>
        /// The list of connections
        /// </summary>
        public IList<GatewayListConnectionsResponse.GatewayConnection> Connections
        {
            get { return this._connections; }
            set { this._connections = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the GatewayListConnectionsResponse
        /// class.
        /// </summary>
        public GatewayListConnectionsResponse()
        {
            this._connections = new List<GatewayListConnectionsResponse.GatewayConnection>();
        }
        
        /// <summary>
        /// Gets the sequence of Connections.
        /// </summary>
        public IEnumerator<GatewayListConnectionsResponse.GatewayConnection> GetEnumerator()
        {
            return this.Connections.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of Connections.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
        
        public partial class GatewayConnection
        {
            private string _localNetworkSiteName;
            
            /// <summary>
            /// The name of the local network site represented by the connection
            /// </summary>
            public string LocalNetworkSiteName
            {
                get { return this._localNetworkSiteName; }
                set { this._localNetworkSiteName = value; }
            }
            
            private GatewayConnectivityState _connectivityState;
            
            /// <summary>
            /// The connection state of the site. You can set the connection
            /// state to Connected, Connecting or NotConnected.
            /// </summary>
            public GatewayConnectivityState ConnectivityState
            {
                get { return this._connectivityState; }
                set { this._connectivityState = value; }
            }
            
            private GatewayEvent _lastEvent;
            
            /// <summary>
            /// A record of the last provisioning event for this connection.
            /// </summary>
            public GatewayEvent LastEvent
            {
                get { return this._lastEvent; }
                set { this._lastEvent = value; }
            }
            
            private long _ingressBytesTransferred;
            
            /// <summary>
            /// The number of bytes of data transferred in through this
            /// connection since it was started
            /// </summary>
            public long IngressBytesTransferred
            {
                get { return this._ingressBytesTransferred; }
                set { this._ingressBytesTransferred = value; }
            }
            
            private long _egressBytesTransferred;
            
            /// <summary>
            /// The number of bytes of data transferred out through this
            /// connection since it was started
            /// </summary>
            public long EgressBytesTransferred
            {
                get { return this._egressBytesTransferred; }
                set { this._egressBytesTransferred = value; }
            }
            
            private DateTime _lastConnectionEstablished;
            
            public DateTime LastConnectionEstablished
            {
                get { return this._lastConnectionEstablished; }
                set { this._lastConnectionEstablished = value; }
            }
            
            private IList<string> _allocatedIPAddresses;
            
            /// <summary>
            /// If LocalNetworkSiteName is defined as VPNClientConnection, this
            /// element contains a list of IP addresses (represented as
            /// strings) that are assigned to currently connected VPN clients.
            /// </summary>
            public IList<string> AllocatedIPAddresses
            {
                get { return this._allocatedIPAddresses; }
                set { this._allocatedIPAddresses = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the GatewayConnection class.
            /// </summary>
            public GatewayConnection()
            {
                this._allocatedIPAddresses = new List<string>();
            }
        }
    }
    
    /// <summary>
    /// The respoonse to the get supported platform configuration request
    /// </summary>
    public partial class GatewayListSupportedDevicesResponse : OperationResponse
    {
        private string _version;
        
        /// <summary>
        /// The version for this device configuration list.
        /// </summary>
        public string Version
        {
            get { return this._version; }
            set { this._version = value; }
        }
        
        private IList<GatewayListSupportedDevicesResponse.Vendor> _vendors;
        
        /// <summary>
        /// The set of supported vendors
        /// </summary>
        public IList<GatewayListSupportedDevicesResponse.Vendor> Vendors
        {
            get { return this._vendors; }
            set { this._vendors = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// GatewayListSupportedDevicesResponse class.
        /// </summary>
        public GatewayListSupportedDevicesResponse()
        {
            this._vendors = new List<GatewayListSupportedDevicesResponse.Vendor>();
        }
        
        /// <summary>
        /// The name and supported platforms for the vendor.
        /// </summary>
        public partial class Vendor
        {
            private string _name;
            
            /// <summary>
            /// The vendor name
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            private IList<GatewayListSupportedDevicesResponse.Platform> _platforms;
            
            /// <summary>
            /// The supported platforms for the vendor.
            /// </summary>
            public IList<GatewayListSupportedDevicesResponse.Platform> Platforms
            {
                get { return this._platforms; }
                set { this._platforms = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the Vendor class.
            /// </summary>
            public Vendor()
            {
                this._platforms = new List<GatewayListSupportedDevicesResponse.Platform>();
            }
        }
        
        /// <summary>
        /// The name and supported OS Families for this vendor on the platform
        /// </summary>
        public partial class Platform
        {
            private string _name;
            
            /// <summary>
            /// The platform name.
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            private IList<GatewayListSupportedDevicesResponse.OSFamily> _oSFamilies;
            
            /// <summary>
            /// The supported OS Families for this platform
            /// </summary>
            public IList<GatewayListSupportedDevicesResponse.OSFamily> OSFamilies
            {
                get { return this._oSFamilies; }
                set { this._oSFamilies = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the Platform class.
            /// </summary>
            public Platform()
            {
                this._oSFamilies = new List<GatewayListSupportedDevicesResponse.OSFamily>();
            }
        }
        
        public partial class OSFamily
        {
            private string _name;
            
            /// <summary>
            /// The name of the os family
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the OSFamily class.
            /// </summary>
            public OSFamily()
            {
            }
        }
    }
    
    /// <summary>
    /// A standard storage response including an HTTP status code and request
    /// ID.
    /// </summary>
    public partial class GatewayOperationResponse : OperationResponse
    {
        private string _operationId;
        
        public string OperationId
        {
            get { return this._operationId; }
            set { this._operationId = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the GatewayOperationResponse class.
        /// </summary>
        public GatewayOperationResponse()
        {
        }
    }
    
    /// <summary>
    /// The status of the asynchronous request.
    /// </summary>
    public enum GatewayOperationStatus
    {
        /// <summary>
        /// The asynchronous request is in progress.
        /// </summary>
        InProgress = 0,
        
        /// <summary>
        /// The asynchronous request succeeded.
        /// </summary>
        Successful = 1,
        
        /// <summary>
        /// The asynchronous request failed.
        /// </summary>
        Failed = 2,
    }
    
    /// <summary>
    /// The processor architecture for the generated vpn client package
    /// </summary>
    public enum GatewayProcessorArchitecture
    {
        Amd64 = 0,
        
        X86 = 1,
    }
    
    /// <summary>
    /// Possible values for Gateway Profile
    /// </summary>
    public static partial class GatewayProfiles
    {
        public const string Small = "Small";
    }
    
    /// <summary>
    /// Standard states for Virtual Network Gateway Provisioning Events
    /// </summary>
    public static partial class GatewayProvisioningEventStates
    {
        public const string NotProvisioned = "NotProvisioned";
        
        public const string Deprovisioning = "Deprovisioning";
        
        public const string Provisioning = "Provisioning";
        
        public const string Provisioned = "Provisioned";
    }
    
    /// <summary>
    /// The length of shared key to generate
    /// </summary>
    public partial class GatewayResetSharedKeyParameters
    {
        private int _keyLength;
        
        /// <summary>
        /// The number of bytes in the shared key.  Minimum is 1 and maximum is
        /// 128
        /// </summary>
        public int KeyLength
        {
            get { return this._keyLength; }
            set { this._keyLength = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the GatewayResetSharedKeyParameters
        /// class.
        /// </summary>
        public GatewayResetSharedKeyParameters()
        {
        }
    }
    
    public enum GatewayType
    {
        StaticRouting = 0,
        
        DynamicRouting = 1,
    }
    
    public enum LocalNetworkConnectionType
    {
        IPSecurity = 0,
        
        Dedicated = 1,
    }
    
    /// <summary>
    /// The response structure for the Server get configuration operation
    /// </summary>
    public partial class NetworkGetConfigurationResponse : OperationResponse
    {
        private IList<NetworkGetConfigurationResponse.DnsServer> _dnsServers;
        
        /// <summary>
        /// Contains the collection of DNS servers. By default, you can specify
        /// up to nine DNS servers in this section. You can change the DNS
        /// server limit to a value other than nine by contacting Azure
        /// support. When you specify a DNS server here, it must be part of an
        /// external site, not a part of a Windows Azure Virtual Network. DNS
        /// server names must be uniquely identifiable within the subscription.
        /// </summary>
        public IList<NetworkGetConfigurationResponse.DnsServer> DnsServers
        {
            get { return this._dnsServers; }
            set { this._dnsServers = value; }
        }
        
        private IList<NetworkGetConfigurationResponse.LocalNetworkSite> _localNetworkSites;
        
        /// <summary>
        /// Contains the collection parameters used to configure local network
        /// sites used in cross-premise network configurations.
        /// </summary>
        public IList<NetworkGetConfigurationResponse.LocalNetworkSite> LocalNetworkSites
        {
            get { return this._localNetworkSites; }
            set { this._localNetworkSites = value; }
        }
        
        private IList<NetworkGetConfigurationResponse.VirtualNetworkSite> _virtualNetworkSites;
        
        /// <summary>
        /// Contains the collection parameters that describe the virtual
        /// networks.
        /// </summary>
        public IList<NetworkGetConfigurationResponse.VirtualNetworkSite> VirtualNetworkSites
        {
            get { return this._virtualNetworkSites; }
            set { this._virtualNetworkSites = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the NetworkGetConfigurationResponse
        /// class.
        /// </summary>
        public NetworkGetConfigurationResponse()
        {
            this._dnsServers = new List<NetworkGetConfigurationResponse.DnsServer>();
            this._localNetworkSites = new List<NetworkGetConfigurationResponse.LocalNetworkSite>();
            this._virtualNetworkSites = new List<NetworkGetConfigurationResponse.VirtualNetworkSite>();
        }
        
        /// <summary>
        /// Contains the name and IPv4 address of the DNS server.
        /// </summary>
        public partial class DnsServer
        {
            private string _name;
            
            /// <summary>
            /// Specifies the name of the DNS server. DNS server names must be
            /// uniquely identifiable within the subscription.
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            private string _iPAddress;
            
            /// <summary>
            /// Specifies the IPv4 address of the DNS server
            /// </summary>
            public string IPAddress
            {
                get { return this._iPAddress; }
                set { this._iPAddress = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the DnsServer class.
            /// </summary>
            public DnsServer()
            {
            }
        }
        
        /// <summary>
        /// Specifies the parameters that are used to configure a local network
        /// site
        /// </summary>
        public partial class LocalNetworkSite
        {
            private string _name;
            
            /// <summary>
            /// Specifies the identifier for the local network. Each local
            /// network site is referred to by a name. The name must be
            /// uniquely identifiable within the subscription. The name must
            /// not contain any spaces and cannot begin with a number.
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            private IList<string> _addressSpace;
            
            /// <summary>
            /// Contains a collection of Classless Inter-Domain Routing (CIDR)
            /// identifiers that specify the address space that you will use
            /// for your local network site. It is recommended that you
            /// specify only one public IPv4 address space per local network
            /// site. Address space identifiers must conform to the following
            /// parameters: (1) This is the address space of your on-premises
            /// network. (2) The IP address ranges that you specify must not
            /// overlap with the IP address ranges of any other local network
            /// sites or virtual network sites. Addresses can be either public
            /// or private
            /// </summary>
            public IList<string> AddressSpace
            {
                get { return this._addressSpace; }
                set { this._addressSpace = value; }
            }
            
            private string _vpnGatewayAddress;
            
            /// <summary>
            /// Specifies the IPv4 Address of the VPN Gateway. You can specify
            /// only one IP address per local network site. To establish the
            /// VPN tunnel, you must configure a VPN gateway appliance on your
            /// local premises (either software or hardware) that supports the
            /// IKE v1 protocol and can be reached by a public IP address. You
            /// can specify only one public IPv4 address per local network
            /// site.
            /// </summary>
            public string VpnGatewayAddress
            {
                get { return this._vpnGatewayAddress; }
                set { this._vpnGatewayAddress = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the LocalNetworkSite class.
            /// </summary>
            public LocalNetworkSite()
            {
                this._addressSpace = new List<string>();
            }
        }
        
        /// <summary>
        /// Contains the parameters for a specific subnet. You can specify
        /// multiple subnets for the virtual network. The IP addresses of the
        /// subnets you specify must be fully contained within the IP address
        /// range for the virtual network it resides in. To configure a subnet
        /// for cross-premises connectivity, specify a subnet with the name
        /// GatewaySubnet.
        /// </summary>
        public partial class Subnet
        {
            private string _name;
            
            /// <summary>
            /// Specifies the name of the subnet. Subnet names must be unique
            /// with the virtual network. The name GatewaySubnet is reserved
            /// for use in corss-premises connectivity.
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            private string _addressPrefix;
            
            /// <summary>
            /// Specifies the address space of the subnet.
            /// </summary>
            public string AddressPrefix
            {
                get { return this._addressPrefix; }
                set { this._addressPrefix = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the Subnet class.
            /// </summary>
            public Subnet()
            {
            }
        }
        
        /// <summary>
        /// Specifies a DNS server to use for name resolution. If you do not
        /// set any DNS server references, Windows Azure DNS service is set as
        /// the default for the virtual. If you do not specify any DNS
        /// servers, name resolution will not work across a VPN link. You can
        /// specify up to nine DNS servers.
        /// </summary>
        public partial class DnsServerReference
        {
            private string _name;
            
            /// <summary>
            /// The name of the DNS server to use for name resolution on the
            /// virtual network.
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the DnsServerReference class.
            /// </summary>
            public DnsServerReference()
            {
            }
        }
        
        /// <summary>
        /// Specifies the name of the local network. Any site that you
        /// reference must be defined in the LocalNetworkSite element of this
        /// request.
        /// </summary>
        public partial class LocalNetworkSiteReference
        {
            private string _name;
            
            /// <summary>
            /// Specifies the name of the local network.
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            private LocalNetworkConnectionType _connectionType;
            
            /// <summary>
            /// Specifies the type of connection of the local network site. The
            /// value of this element can be either IPsec or Dedicated. The
            /// default value is IPsec.
            /// </summary>
            public LocalNetworkConnectionType ConnectionType
            {
                get { return this._connectionType; }
                set { this._connectionType = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the LocalNetworkSiteReference
            /// class.
            /// </summary>
            public LocalNetworkSiteReference()
            {
            }
        }
        
        public partial class Gateway
        {
            private string _profile;
            
            /// <summary>
            /// Specifies the gateway connection size.
            /// </summary>
            public string Profile
            {
                get { return this._profile; }
                set { this._profile = value; }
            }
            
            private IList<string> _vpnClientAddressPool;
            
            /// <summary>
            /// The VPNClientAddressPool reserves a pool of IP addresses for
            /// VPN clients. This object is used for point-to-site
            /// connectivity.
            /// </summary>
            public IList<string> VpnClientAddressPool
            {
                get { return this._vpnClientAddressPool; }
                set { this._vpnClientAddressPool = value; }
            }
            
            private IList<NetworkGetConfigurationResponse.LocalNetworkSiteReference> _connectionsToLocalNetwork;
            
            /// <summary>
            /// Required for cross-premises connections only. Contains the list
            /// of local networks that the virtual network can connect to.
            /// Currently you can only specify one site. Any site that you
            /// reference in this section must be defined in the network
            /// configuration and must fall within the total address space
            /// </summary>
            public IList<NetworkGetConfigurationResponse.LocalNetworkSiteReference> ConnectionsToLocalNetwork
            {
                get { return this._connectionsToLocalNetwork; }
                set { this._connectionsToLocalNetwork = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the Gateway class.
            /// </summary>
            public Gateway()
            {
                this._vpnClientAddressPool = new List<string>();
                this._connectionsToLocalNetwork = new List<NetworkGetConfigurationResponse.LocalNetworkSiteReference>();
            }
        }
        
        /// <summary>
        /// Contains parameters that describe a virtual network site. Each
        /// virtual network site must have a unique name and must be
        /// associated with an affinity group that has been previously created.
        /// </summary>
        public partial class VirtualNetworkSite
        {
            private string _name;
            
            /// <summary>
            /// Specifies a name for the virtual network. The name must be
            /// unique within the subscription.
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            private string _affinityGroup;
            
            /// <summary>
            /// The name of the affinity group that you want this virtual
            /// network site to be associated with.  The affinity group must
            /// already exist in order to refer to it in this section.
            /// </summary>
            public string AffinityGroup
            {
                get { return this._affinityGroup; }
                set { this._affinityGroup = value; }
            }
            
            private string _label;
            
            /// <summary>
            /// Specifies a friendly identifier for the virtual network.  There
            /// are no guarantees for uniqueness. Labels can be a maximum of
            /// 100 characters in length and can contain special characters.
            /// </summary>
            public string Label
            {
                get { return this._label; }
                set { this._label = value; }
            }
            
            private IList<string> _addressSpace;
            
            /// <summary>
            /// Specifies the address space for the virtual network. This is a
            /// private IP address space that conforms to RFC 1918.  Addresses
            /// that you specify must not overlap with those specified for
            /// other virtual network sites or local network sites.
            /// </summary>
            public IList<string> AddressSpace
            {
                get { return this._addressSpace; }
                set { this._addressSpace = value; }
            }
            
            private IList<NetworkGetConfigurationResponse.Subnet> _subnets;
            
            /// <summary>
            /// Contains the specification for the subnets that you want to
            /// create within the address space of your virtual network sites.
            /// </summary>
            public IList<NetworkGetConfigurationResponse.Subnet> Subnets
            {
                get { return this._subnets; }
                set { this._subnets = value; }
            }
            
            private IList<NetworkGetConfigurationResponse.DnsServerReference> _dnsServerReferences;
            
            /// <summary>
            /// Contains the specification of DNS servers that are used for
            /// name resolution in this virtual network.  You must reference
            /// the DNS servers that you already declared in the Dns element.
            /// </summary>
            public IList<NetworkGetConfigurationResponse.DnsServerReference> DnsServerReferences
            {
                get { return this._dnsServerReferences; }
                set { this._dnsServerReferences = value; }
            }
            
            private NetworkGetConfigurationResponse.Gateway _gateway;
            
            /// <summary>
            /// Required for cross-premises connections only. Contains gateway
            /// references to the local network sites that the virtual network
            /// can connect to. If you don’t require cross-premises
            /// connectivity, this property is optional.
            /// </summary>
            public NetworkGetConfigurationResponse.Gateway Gateway
            {
                get { return this._gateway; }
                set { this._gateway = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the VirtualNetworkSite class.
            /// </summary>
            public VirtualNetworkSite()
            {
                this._addressSpace = new List<string>();
                this._subnets = new List<NetworkGetConfigurationResponse.Subnet>();
                this._dnsServerReferences = new List<NetworkGetConfigurationResponse.DnsServerReference>();
            }
        }
    }
    
    /// <summary>
    /// The response structure for the Server List operation
    /// </summary>
    public partial class NetworkListResponse : OperationResponse, IEnumerable<NetworkListResponse.VirtualNetworkSite>
    {
        private IList<NetworkListResponse.VirtualNetworkSite> _virtualNetworkSites;
        
        public IList<NetworkListResponse.VirtualNetworkSite> VirtualNetworkSites
        {
            get { return this._virtualNetworkSites; }
            set { this._virtualNetworkSites = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the NetworkListResponse class.
        /// </summary>
        public NetworkListResponse()
        {
            this._virtualNetworkSites = new List<NetworkListResponse.VirtualNetworkSite>();
        }
        
        /// <summary>
        /// Gets the sequence of VirtualNetworkSites.
        /// </summary>
        public IEnumerator<NetworkListResponse.VirtualNetworkSite> GetEnumerator()
        {
            return this.VirtualNetworkSites.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of VirtualNetworkSites.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
        
        /// <summary>
        /// Contains the collections of parameters used to configure a virtual
        /// network space that is dedicated to your subscription without
        /// overlapping with other networks
        /// </summary>
        public partial class VirtualNetworkSite
        {
            private string _name;
            
            /// <summary>
            /// Name of the virtual network site.
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            private string _label;
            
            /// <summary>
            /// The friendly identifier of the site.
            /// </summary>
            public string Label
            {
                get { return this._label; }
                set { this._label = value; }
            }
            
            private string _id;
            
            /// <summary>
            /// A unique string identifier that represents the virtual network
            /// site.
            /// </summary>
            public string Id
            {
                get { return this._id; }
                set { this._id = value; }
            }
            
            private string _affinityGroup;
            
            /// <summary>
            /// An affinity group, which indirectly refers to the location
            /// where the virtual network exists.
            /// </summary>
            public string AffinityGroup
            {
                get { return this._affinityGroup; }
                set { this._affinityGroup = value; }
            }
            
            private string _state;
            
            /// <summary>
            /// Current status of the virtual network. (Created, Creating,
            /// Updating, Deleting, Unavailable)
            /// </summary>
            public string State
            {
                get { return this._state; }
                set { this._state = value; }
            }
            
            private NetworkListResponse.AddressSpace _addressSpace;
            
            /// <summary>
            /// The list of network address spaces for a virtual network site.
            /// This represents the overall network space contained within the
            /// virtual network site.
            /// </summary>
            public NetworkListResponse.AddressSpace AddressSpace
            {
                get { return this._addressSpace; }
                set { this._addressSpace = value; }
            }
            
            private IList<NetworkListResponse.Subnet> _subnets;
            
            /// <summary>
            /// The list of network subnets for a virtual network site. All
            /// network subnets must be contained within the overall virtual
            /// network address spaces.
            /// </summary>
            public IList<NetworkListResponse.Subnet> Subnets
            {
                get { return this._subnets; }
                set { this._subnets = value; }
            }
            
            private IList<NetworkListResponse.DnsServer> _dnsServers;
            
            /// <summary>
            /// The list of on DNS Servers associated with the virtual network
            /// site.
            /// </summary>
            public IList<NetworkListResponse.DnsServer> DnsServers
            {
                get { return this._dnsServers; }
                set { this._dnsServers = value; }
            }
            
            private NetworkListResponse.Gateway _gateway;
            
            /// <summary>
            /// Gateway that contains a list of Local Network Sites which
            /// enables the Virtual network site to communicate with a
            /// customer’s on premise networks.
            /// </summary>
            public NetworkListResponse.Gateway Gateway
            {
                get { return this._gateway; }
                set { this._gateway = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the VirtualNetworkSite class.
            /// </summary>
            public VirtualNetworkSite()
            {
                this._subnets = new List<NetworkListResponse.Subnet>();
                this._dnsServers = new List<NetworkListResponse.DnsServer>();
            }
        }
        
        public partial class AddressSpace
        {
            private IList<string> _addressPrefixes;
            
            /// <summary>
            /// Address spaces, in CIDR format in the virtual network
            /// </summary>
            public IList<string> AddressPrefixes
            {
                get { return this._addressPrefixes; }
                set { this._addressPrefixes = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the AddressSpace class.
            /// </summary>
            public AddressSpace()
            {
                this._addressPrefixes = new List<string>();
            }
        }
        
        public partial class Subnet
        {
            private string _name;
            
            /// <summary>
            /// Name for the subnet
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            private string _addressPrefix;
            
            /// <summary>
            /// Represents an address space, in CIDR format that defines the
            /// subnet
            /// </summary>
            public string AddressPrefix
            {
                get { return this._addressPrefix; }
                set { this._addressPrefix = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the Subnet class.
            /// </summary>
            public Subnet()
            {
            }
        }
        
        public partial class DnsServer
        {
            private string _name;
            
            /// <summary>
            /// The name of the DNS server
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            private string _address;
            
            /// <summary>
            /// The IPv4 address of the DNS server
            /// </summary>
            public string Address
            {
                get { return this._address; }
                set { this._address = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the DnsServer class.
            /// </summary>
            public DnsServer()
            {
            }
        }
        
        /// <summary>
        /// Contains gateway references to the local network sites that the
        /// virtual network can connect to.
        /// </summary>
        public partial class Gateway
        {
            private string _profile;
            
            /// <summary>
            /// The gateway connection size
            /// </summary>
            public string Profile
            {
                get { return this._profile; }
                set { this._profile = value; }
            }
            
            private IList<NetworkListResponse.LocalNetworkSite> _sites;
            
            /// <summary>
            /// The list of local network sites that the virtual network can
            /// connect to.
            /// </summary>
            public IList<NetworkListResponse.LocalNetworkSite> Sites
            {
                get { return this._sites; }
                set { this._sites = value; }
            }
            
            private NetworkListResponse.VPNClientAddressPool _vPNClientAddressPool;
            
            /// <summary>
            /// The VPNClientAddressPool reserves a pool of IP addresses for
            /// VPN clients. This object is used for point-to-site
            /// connectivity.
            /// </summary>
            public NetworkListResponse.VPNClientAddressPool VPNClientAddressPool
            {
                get { return this._vPNClientAddressPool; }
                set { this._vPNClientAddressPool = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the Gateway class.
            /// </summary>
            public Gateway()
            {
                this._sites = new List<NetworkListResponse.LocalNetworkSite>();
            }
        }
        
        /// <summary>
        /// Contains the list of parameters defining the local network site.
        /// </summary>
        public partial class LocalNetworkSite
        {
            private string _name;
            
            /// <summary>
            /// The name of the local network site
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            private string _vpnGatewayAddress;
            
            /// <summary>
            /// The IPv4 address of the local network site
            /// </summary>
            public string VpnGatewayAddress
            {
                get { return this._vpnGatewayAddress; }
                set { this._vpnGatewayAddress = value; }
            }
            
            private NetworkListResponse.AddressSpace _addressSpace;
            
            /// <summary>
            /// The address space of the local network site
            /// </summary>
            public NetworkListResponse.AddressSpace AddressSpace
            {
                get { return this._addressSpace; }
                set { this._addressSpace = value; }
            }
            
            private IList<NetworkListResponse.Connection> _connections;
            
            /// <summary>
            /// Specifies the types of connections to the local network site
            /// </summary>
            public IList<NetworkListResponse.Connection> Connections
            {
                get { return this._connections; }
                set { this._connections = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the LocalNetworkSite class.
            /// </summary>
            public LocalNetworkSite()
            {
                this._connections = new List<NetworkListResponse.Connection>();
            }
        }
        
        /// <summary>
        /// Specifies the type of connection of the local network site. The
        /// value of this element can be either IPsec or Dedicated. The
        /// default value is IPsec.
        /// </summary>
        public partial class Connection
        {
            private LocalNetworkConnectionType _type;
            
            public LocalNetworkConnectionType Type
            {
                get { return this._type; }
                set { this._type = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the Connection class.
            /// </summary>
            public Connection()
            {
            }
        }
        
        /// <summary>
        /// The VPNClientAddressPool reserves a pool of IP addresses for VPN
        /// clients. This object is used for point-to-site connectivity.
        /// </summary>
        public partial class VPNClientAddressPool
        {
            private IList<string> _addressPrefixes;
            
            /// <summary>
            /// The CIDR identifiers that identify addresses in the pool.
            /// </summary>
            public IList<string> AddressPrefixes
            {
                get { return this._addressPrefixes; }
                set { this._addressPrefixes = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the VPNClientAddressPool class.
            /// </summary>
            public VPNClientAddressPool()
            {
                this._addressPrefixes = new List<string>();
            }
        }
    }
    
    /// <summary>
    /// The request structure for the Server set configuration operation
    /// </summary>
    public partial class NetworkSetConfigurationParameters
    {
        private IList<NetworkSetConfigurationParameters.DnsServer> _dnsServers;
        
        /// <summary>
        /// Contains the collection of DNS servers. By default, you can specify
        /// up to nine DNS servers in this section. You can change the DNS
        /// server limit to a value other than nine by contacting Azure
        /// support. When you specify a DNS server here, it must be part of an
        /// external site, not a part of a Windows Azure Virtual Network. DNS
        /// server names must be uniquely identifiable within the subscription.
        /// </summary>
        public IList<NetworkSetConfigurationParameters.DnsServer> DnsServers
        {
            get { return this._dnsServers; }
            set { this._dnsServers = value; }
        }
        
        private IList<NetworkSetConfigurationParameters.LocalNetworkSite> _localNetworkSites;
        
        /// <summary>
        /// Contains the collection parameters used to configure local network
        /// sites used in cross-premise network configurations.
        /// </summary>
        public IList<NetworkSetConfigurationParameters.LocalNetworkSite> LocalNetworkSites
        {
            get { return this._localNetworkSites; }
            set { this._localNetworkSites = value; }
        }
        
        private IList<NetworkSetConfigurationParameters.VirtualNetworkSite> _virtualNetworkSites;
        
        /// <summary>
        /// Contains the collection parameters that describe the virtual
        /// networks.
        /// </summary>
        public IList<NetworkSetConfigurationParameters.VirtualNetworkSite> VirtualNetworkSites
        {
            get { return this._virtualNetworkSites; }
            set { this._virtualNetworkSites = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the NetworkSetConfigurationParameters
        /// class.
        /// </summary>
        public NetworkSetConfigurationParameters()
        {
            this._dnsServers = new List<NetworkSetConfigurationParameters.DnsServer>();
            this._localNetworkSites = new List<NetworkSetConfigurationParameters.LocalNetworkSite>();
            this._virtualNetworkSites = new List<NetworkSetConfigurationParameters.VirtualNetworkSite>();
        }
        
        /// <summary>
        /// Contains the name and IPv4 address of the DNS server.
        /// </summary>
        public partial class DnsServer
        {
            private string _name;
            
            /// <summary>
            /// Specifies the name of the DNS server. DNS server names must be
            /// uniquely identifiable within the subscription.
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            private string _iPAddress;
            
            /// <summary>
            /// Specifies the IPv4 address of the DNS server
            /// </summary>
            public string IPAddress
            {
                get { return this._iPAddress; }
                set { this._iPAddress = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the DnsServer class.
            /// </summary>
            public DnsServer()
            {
            }
        }
        
        /// <summary>
        /// Specifies the parameters that are used to configure a local network
        /// site
        /// </summary>
        public partial class LocalNetworkSite
        {
            private string _name;
            
            /// <summary>
            /// Specifies the identifier for the local network. Each local
            /// network site is referred to by a name. The name must be
            /// uniquely identifiable within the subscription. The name must
            /// not contain any spaces and cannot begin with a number.
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            private IList<string> _addressSpace;
            
            /// <summary>
            /// Contains a collection of Classless Inter-Domain Routing (CIDR)
            /// identifiers that specify the address space that you will use
            /// for your local network site. It is recommended that you
            /// specify only one public IPv4 address space per local network
            /// site. Address space identifiers must conform to the following
            /// parameters: (1) This is the address space of your on-premises
            /// network. (2) The IP address ranges that you specify must not
            /// overlap with the IP address ranges of any other local network
            /// sites or virtual network sites. Addresses can be either public
            /// or private
            /// </summary>
            public IList<string> AddressSpace
            {
                get { return this._addressSpace; }
                set { this._addressSpace = value; }
            }
            
            private string _vpnGatewayAddress;
            
            /// <summary>
            /// Specifies the IPv4 Address of the VPN Gateway. You can specify
            /// only one IP address per local network site. To establish the
            /// VPN tunnel, you must configure a VPN gateway appliance on your
            /// local premises (either software or hardware) that supports the
            /// IKE v1 protocol and can be reached by a public IP address. You
            /// can specify only one public IPv4 address per local network
            /// site.
            /// </summary>
            public string VpnGatewayAddress
            {
                get { return this._vpnGatewayAddress; }
                set { this._vpnGatewayAddress = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the LocalNetworkSite class.
            /// </summary>
            public LocalNetworkSite()
            {
                this._addressSpace = new List<string>();
            }
        }
        
        /// <summary>
        /// Contains the parameters for a specific subnet. You can specify
        /// multiple subnets for the virtual network. The IP addresses of the
        /// subnets you specify must be fully contained within the IP address
        /// range for the virtual network it resides in. To configure a subnet
        /// for cross-premises connectivity, specify a subnet with the name
        /// GatewaySubnet.
        /// </summary>
        public partial class Subnet
        {
            private string _name;
            
            /// <summary>
            /// Specifies the name of the subnet. Subnet names must be unique
            /// with the virtual network. The name GatewaySubnet is reserved
            /// for use in corss-premises connectivity.
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            private string _addressPrefix;
            
            /// <summary>
            /// Specifies the address space of the subnet.
            /// </summary>
            public string AddressPrefix
            {
                get { return this._addressPrefix; }
                set { this._addressPrefix = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the Subnet class.
            /// </summary>
            public Subnet()
            {
            }
        }
        
        /// <summary>
        /// Specifies a DNS server to use for name resolution. If you do not
        /// set any DNS server references, Windows Azure DNS service is set as
        /// the default for the virtual. If you do not specify any DNS
        /// servers, name resolution will not work across a VPN link. You can
        /// specify up to nine DNS servers.
        /// </summary>
        public partial class DnsServerReference
        {
            private string _name;
            
            /// <summary>
            /// The name of the DNS server to use for name resolution on the
            /// virtual network.
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the DnsServerReference class.
            /// </summary>
            public DnsServerReference()
            {
            }
        }
        
        /// <summary>
        /// Specifies the name of the local network. Any site that you
        /// reference must be defined in the LocalNetworkSite element of this
        /// request.
        /// </summary>
        public partial class LocalNetworkSiteReference
        {
            private string _name;
            
            /// <summary>
            /// Specifies the name of the local network.
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            private LocalNetworkConnectionType _connectionType;
            
            /// <summary>
            /// Specifies the type of connection of the local network site. The
            /// value of this element can be either IPsec or Dedicated. The
            /// default value is IPsec.
            /// </summary>
            public LocalNetworkConnectionType ConnectionType
            {
                get { return this._connectionType; }
                set { this._connectionType = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the LocalNetworkSiteReference
            /// class.
            /// </summary>
            public LocalNetworkSiteReference()
            {
            }
        }
        
        public partial class Gateway
        {
            private string _profile;
            
            /// <summary>
            /// Specifies the gateway connection size.
            /// </summary>
            public string Profile
            {
                get { return this._profile; }
                set { this._profile = value; }
            }
            
            private IList<string> _vpnClientAddressPool;
            
            /// <summary>
            /// The VPNClientAddressPool reserves a pool of IP addresses for
            /// VPN clients. This object is used for point-to-site
            /// connectivity.
            /// </summary>
            public IList<string> VpnClientAddressPool
            {
                get { return this._vpnClientAddressPool; }
                set { this._vpnClientAddressPool = value; }
            }
            
            private IList<NetworkSetConfigurationParameters.LocalNetworkSiteReference> _connectionsToLocalNetwork;
            
            /// <summary>
            /// Required for cross-premises connections only. Contains the list
            /// of local networks that the virtual network can connect to.
            /// Currently you can only specify one site. Any site that you
            /// reference in this section must be defined in the network
            /// configuration and must fall within the total address space
            /// </summary>
            public IList<NetworkSetConfigurationParameters.LocalNetworkSiteReference> ConnectionsToLocalNetwork
            {
                get { return this._connectionsToLocalNetwork; }
                set { this._connectionsToLocalNetwork = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the Gateway class.
            /// </summary>
            public Gateway()
            {
                this._vpnClientAddressPool = new List<string>();
                this._connectionsToLocalNetwork = new List<NetworkSetConfigurationParameters.LocalNetworkSiteReference>();
            }
        }
        
        /// <summary>
        /// Contains parameters that describe a virtual network site. Each
        /// virtual network site must have a unique name and must be
        /// associated with an affinity group that has been previously created.
        /// </summary>
        public partial class VirtualNetworkSite
        {
            private string _name;
            
            /// <summary>
            /// Specifies a name for the virtual network. The name must be
            /// unique within the subscription.
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            private string _affinityGroup;
            
            /// <summary>
            /// The name of the affinity group that you want this virtual
            /// network site to be associated with.  The affinity group must
            /// already exist in order to refer to it in this section.
            /// </summary>
            public string AffinityGroup
            {
                get { return this._affinityGroup; }
                set { this._affinityGroup = value; }
            }
            
            private string _label;
            
            /// <summary>
            /// Specifies a friendly identifier for the virtual network.  There
            /// are no guarantees for uniqueness. Labels can be a maximum of
            /// 100 characters in length and can contain special characters.
            /// </summary>
            public string Label
            {
                get { return this._label; }
                set { this._label = value; }
            }
            
            private IList<string> _addressSpace;
            
            /// <summary>
            /// Specifies the address space for the virtual network. This is a
            /// private IP address space that conforms to RFC 1918.  Addresses
            /// that you specify must not overlap with those specified for
            /// other virtual network sites or local network sites.
            /// </summary>
            public IList<string> AddressSpace
            {
                get { return this._addressSpace; }
                set { this._addressSpace = value; }
            }
            
            private IList<NetworkSetConfigurationParameters.Subnet> _subnets;
            
            /// <summary>
            /// Contains the specification for the subnets that you want to
            /// create within the address space of your virtual network sites.
            /// </summary>
            public IList<NetworkSetConfigurationParameters.Subnet> Subnets
            {
                get { return this._subnets; }
                set { this._subnets = value; }
            }
            
            private IList<NetworkSetConfigurationParameters.DnsServerReference> _dnsServerReferences;
            
            /// <summary>
            /// Contains the specification of DNS servers that are used for
            /// name resolution in this virtual network.  You must reference
            /// the DNS servers that you already declared in the Dns element.
            /// </summary>
            public IList<NetworkSetConfigurationParameters.DnsServerReference> DnsServerReferences
            {
                get { return this._dnsServerReferences; }
                set { this._dnsServerReferences = value; }
            }
            
            private NetworkSetConfigurationParameters.Gateway _gateway;
            
            /// <summary>
            /// Required for cross-premises connections only. Contains gateway
            /// references to the local network sites that the virtual network
            /// can connect to. If you don’t require cross-premises
            /// connectivity, this property is optional.
            /// </summary>
            public NetworkSetConfigurationParameters.Gateway Gateway
            {
                get { return this._gateway; }
                set { this._gateway = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the VirtualNetworkSite class.
            /// </summary>
            public VirtualNetworkSite()
            {
                this._addressSpace = new List<string>();
                this._subnets = new List<NetworkSetConfigurationParameters.Subnet>();
                this._dnsServerReferences = new List<NetworkSetConfigurationParameters.DnsServerReference>();
            }
        }
    }
    
    public static partial class VirtualNetworkState
    {
        public const string Created = "Created";
        
        public const string Creating = "Creating";
        
        public const string Updating = "Updating";
        
        public const string Deleting = "Deleting";
        
        public const string Unavailable = "Unavailable";
    }
}

namespace Microsoft.WindowsAzure.Management.VirtualNetworks
{
    /// <summary>
    /// The Service Management API includes operations for managing the virtual
    /// networks your subscription.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157182.aspx for
    /// more information)
    /// </summary>
    public partial interface IVirtualNetworkManagementClient
    {
        /// <summary>
        /// When you create a Windows Azure subscription, it is uniquely
        /// identified by a subscription ID. The subscription ID forms part of
        /// the URI for every call that you make to the Service Management
        /// API.  The Windows Azure Service ManagementAPI use mutual
        /// authentication of management certificates over SSL to ensure that
        /// a request made to the service is secure.  No anonymous requests
        /// are allowed.
        /// </summary>
        SubscriptionCloudCredentials Credentials
        {
            get; 
        }
        
        /// <summary>
        /// The URI used as the base for all SQL requests.
        /// </summary>
        Uri BaseUri
        {
            get; 
        }
        
        IClientRootCertificateOperations ClientRootCertificates
        {
            get; 
        }
        
        IGatewayOperations Gateways
        {
            get; 
        }
        
        INetworkOperations Networks
        {
            get; 
        }
    }
    
    /// <summary>
    /// The Service Management API includes operations for managing the virtual
    /// networks your subscription.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157182.aspx for
    /// more information)
    /// </summary>
    public static partial class VirtualNetworkManagementClientExtensions
    {
    }
    
    /// <summary>
    /// The Service Management API includes operations for managing the virtual
    /// networks your subscription.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157182.aspx for
    /// more information)
    /// </summary>
    public partial class VirtualNetworkManagementClient : ServiceClient<VirtualNetworkManagementClient>, IVirtualNetworkManagementClient
    {
        private SubscriptionCloudCredentials _credentials;
        
        /// <summary>
        /// When you create a Windows Azure subscription, it is uniquely
        /// identified by a subscription ID. The subscription ID forms part of
        /// the URI for every call that you make to the Service Management
        /// API.  The Windows Azure Service ManagementAPI use mutual
        /// authentication of management certificates over SSL to ensure that
        /// a request made to the service is secure.  No anonymous requests
        /// are allowed.
        /// </summary>
        public SubscriptionCloudCredentials Credentials
        {
            get { return this._credentials; }
        }
        
        private Uri _baseUri;
        
        /// <summary>
        /// The URI used as the base for all SQL requests.
        /// </summary>
        public Uri BaseUri
        {
            get { return this._baseUri; }
        }
        
        private IClientRootCertificateOperations _clientRootCertificates;
        
        public virtual IClientRootCertificateOperations ClientRootCertificates
        {
            get { return this._clientRootCertificates; }
        }
        
        private IGatewayOperations _gateways;
        
        public virtual IGatewayOperations Gateways
        {
            get { return this._gateways; }
        }
        
        private INetworkOperations _networks;
        
        public virtual INetworkOperations Networks
        {
            get { return this._networks; }
        }
        
        /// <summary>
        /// Initializes a new instance of the VirtualNetworkManagementClient
        /// class.
        /// </summary>
        private VirtualNetworkManagementClient()
            : base()
        {
            this._clientRootCertificates = new ClientRootCertificateOperations(this);
            this._gateways = new GatewayOperations(this);
            this._networks = new NetworkOperations(this);
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }
        
        /// <summary>
        /// Initializes a new instance of the VirtualNetworkManagementClient
        /// class.
        /// </summary>
        /// <param name='credentials'>
        /// When you create a Windows Azure subscription, it is uniquely
        /// identified by a subscription ID. The subscription ID forms part of
        /// the URI for every call that you make to the Service Management
        /// API.  The Windows Azure Service ManagementAPI use mutual
        /// authentication of management certificates over SSL to ensure that
        /// a request made to the service is secure.  No anonymous requests
        /// are allowed.
        /// </param>
        /// <param name='baseUri'>
        /// The URI used as the base for all SQL requests.
        /// </param>
        public VirtualNetworkManagementClient(SubscriptionCloudCredentials credentials, Uri baseUri)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._credentials = credentials;
            this._baseUri = baseUri;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the VirtualNetworkManagementClient
        /// class.
        /// </summary>
        /// <param name='credentials'>
        /// When you create a Windows Azure subscription, it is uniquely
        /// identified by a subscription ID. The subscription ID forms part of
        /// the URI for every call that you make to the Service Management
        /// API.  The Windows Azure Service ManagementAPI use mutual
        /// authentication of management certificates over SSL to ensure that
        /// a request made to the service is secure.  No anonymous requests
        /// are allowed.
        /// </param>
        public VirtualNetworkManagementClient(SubscriptionCloudCredentials credentials)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._credentials = credentials;
            this._baseUri = new Uri("https://management.core.windows.net");
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Parse enum values for type LocalNetworkConnectionType.
        /// </summary>
        /// <param name='value'>
        /// The value to parse.
        /// </param>
        /// <returns>
        /// The enum value.
        /// </returns>
        internal static LocalNetworkConnectionType ParseLocalNetworkConnectionType(string value)
        {
            if (value == "IPsec")
            {
                return LocalNetworkConnectionType.IPSecurity;
            }
            if (value == "Dedicated")
            {
                return LocalNetworkConnectionType.Dedicated;
            }
            throw new ArgumentOutOfRangeException("value");
        }
        
        /// <summary>
        /// Convert an enum of type LocalNetworkConnectionType to a string.
        /// </summary>
        /// <param name='value'>
        /// The value to convert to a string.
        /// </param>
        /// <returns>
        /// The enum value as a string.
        /// </returns>
        internal static string LocalNetworkConnectionTypeToString(LocalNetworkConnectionType value)
        {
            if (value == LocalNetworkConnectionType.IPSecurity)
            {
                return "IPsec";
            }
            if (value == LocalNetworkConnectionType.Dedicated)
            {
                return "Dedicated";
            }
            throw new ArgumentOutOfRangeException("value");
        }
    }
    
    public partial interface IClientRootCertificateOperations
    {
        /// <summary>
        /// The Delete Client Root Certificate operation deletes a previously
        /// uploaded client root certificate. from Windows Azure  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn205128.aspx
        /// for more information)
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='certificateThumbprint'>
        /// The X509 certificate thumbprint
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<GatewayOperationResponse> DeleteAsync(string virtualNetworkName, string certificateThumbprint, CancellationToken cancellationToken);
        
        /// <summary>
        /// The Get Client Root Certificate operation returns the public
        /// portion of a previously uploaded client root certificate in a
        /// base-64 encoded format from Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn205127.aspx
        /// for more information)
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='certificateThumbprint'>
        /// The X509 certificate thumbprint
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<ClientRootCertificateGetResponse> GetAsync(string virtualNetworkName, string certificateThumbprint, CancellationToken cancellationToken);
        
        /// <summary>
        /// The List Client Root Certificates operation returns a list of all
        /// the client root certificates that are associated with the
        /// specified virtual network in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn205130.aspx
        /// for more information)
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to the list client root certificates request
        /// </returns>
        Task<ClientRootCertificateListResponse> ListAsync(string virtualNetworkName, CancellationToken cancellationToken);
        
        /// <summary>
        /// The Upload Client Root Certificate operation is used to upload a
        /// new client root certificate to Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn205129.aspx
        /// for more information)
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Upload client certificate Virtual
        /// Network Gateway operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<GatewayOperationResponse> CreateAsync(string virtualNetworkName, ClientRootCertificateCreateParameters parameters, CancellationToken cancellationToken);
    }
    
    public static partial class ClientRootCertificateOperationsExtensions
    {
        /// <summary>
        /// The Delete Client Root Certificate operation deletes a previously
        /// uploaded client root certificate. from Windows Azure  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn205128.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IClientRootCertificateOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='certificateThumbprint'>
        /// The X509 certificate thumbprint
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static GatewayOperationResponse Delete(this IClientRootCertificateOperations operations, string virtualNetworkName, string certificateThumbprint)
        {
            try
            {
                return operations.DeleteAsync(virtualNetworkName, certificateThumbprint).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Delete Client Root Certificate operation deletes a previously
        /// uploaded client root certificate. from Windows Azure  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn205128.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IClientRootCertificateOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='certificateThumbprint'>
        /// The X509 certificate thumbprint
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<GatewayOperationResponse> DeleteAsync(this IClientRootCertificateOperations operations, string virtualNetworkName, string certificateThumbprint)
        {
            return operations.DeleteAsync(virtualNetworkName, certificateThumbprint, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Client Root Certificate operation returns the public
        /// portion of a previously uploaded client root certificate in a
        /// base-64 encoded format from Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn205127.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IClientRootCertificateOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='certificateThumbprint'>
        /// The X509 certificate thumbprint
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static ClientRootCertificateGetResponse Get(this IClientRootCertificateOperations operations, string virtualNetworkName, string certificateThumbprint)
        {
            try
            {
                return operations.GetAsync(virtualNetworkName, certificateThumbprint).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Get Client Root Certificate operation returns the public
        /// portion of a previously uploaded client root certificate in a
        /// base-64 encoded format from Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn205127.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IClientRootCertificateOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='certificateThumbprint'>
        /// The X509 certificate thumbprint
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<ClientRootCertificateGetResponse> GetAsync(this IClientRootCertificateOperations operations, string virtualNetworkName, string certificateThumbprint)
        {
            return operations.GetAsync(virtualNetworkName, certificateThumbprint, CancellationToken.None);
        }
        
        /// <summary>
        /// The List Client Root Certificates operation returns a list of all
        /// the client root certificates that are associated with the
        /// specified virtual network in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn205130.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IClientRootCertificateOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <returns>
        /// The response to the list client root certificates request
        /// </returns>
        public static ClientRootCertificateListResponse List(this IClientRootCertificateOperations operations, string virtualNetworkName)
        {
            try
            {
                return operations.ListAsync(virtualNetworkName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The List Client Root Certificates operation returns a list of all
        /// the client root certificates that are associated with the
        /// specified virtual network in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn205130.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IClientRootCertificateOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <returns>
        /// The response to the list client root certificates request
        /// </returns>
        public static Task<ClientRootCertificateListResponse> ListAsync(this IClientRootCertificateOperations operations, string virtualNetworkName)
        {
            return operations.ListAsync(virtualNetworkName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Upload Client Root Certificate operation is used to upload a
        /// new client root certificate to Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn205129.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IClientRootCertificateOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Upload client certificate Virtual
        /// Network Gateway operation.
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static GatewayOperationResponse Create(this IClientRootCertificateOperations operations, string virtualNetworkName, ClientRootCertificateCreateParameters parameters)
        {
            try
            {
                return operations.CreateAsync(virtualNetworkName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Upload Client Root Certificate operation is used to upload a
        /// new client root certificate to Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn205129.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IClientRootCertificateOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Upload client certificate Virtual
        /// Network Gateway operation.
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<GatewayOperationResponse> CreateAsync(this IClientRootCertificateOperations operations, string virtualNetworkName, ClientRootCertificateCreateParameters parameters)
        {
            return operations.CreateAsync(virtualNetworkName, parameters, CancellationToken.None);
        }
    }
    
    internal partial class ClientRootCertificateOperations : IServiceOperations<VirtualNetworkManagementClient>, IClientRootCertificateOperations
    {
        /// <summary>
        /// Initializes a new instance of the ClientRootCertificateOperations
        /// class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ClientRootCertificateOperations(VirtualNetworkManagementClient client)
        {
            this._client = client;
        }
        
        private VirtualNetworkManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.VirtualNetworkManagementClient.
        /// </summary>
        public VirtualNetworkManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The Delete Client Root Certificate operation deletes a previously
        /// uploaded client root certificate. from Windows Azure  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn205128.aspx
        /// for more information)
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='certificateThumbprint'>
        /// The X509 certificate thumbprint
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<GatewayOperationResponse> DeleteAsync(string virtualNetworkName, string certificateThumbprint, CancellationToken cancellationToken)
        {
            // Validate
            if (virtualNetworkName == null)
            {
                throw new ArgumentNullException("virtualNetworkName");
            }
            if (certificateThumbprint == null)
            {
                throw new ArgumentNullException("certificateThumbprint");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("virtualNetworkName", virtualNetworkName);
                tracingParameters.Add("certificateThumbprint", certificateThumbprint);
                Tracing.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/networking/" + virtualNetworkName + "/gateway/clientrootcertificates/" + certificateThumbprint;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GatewayOperationResponse result = new GatewayOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement gatewayOperationAsyncResponseElement = responseDoc.Element(XName.Get("GatewayOperationAsyncResponse", "http://schemas.microsoft.com/windowsazure"));
                    if (gatewayOperationAsyncResponseElement != null)
                    {
                        XElement idElement = gatewayOperationAsyncResponseElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                        if (idElement != null)
                        {
                            string idInstance = idElement.Value;
                            result.OperationId = idInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Client Root Certificate operation returns the public
        /// portion of a previously uploaded client root certificate in a
        /// base-64 encoded format from Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn205127.aspx
        /// for more information)
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='certificateThumbprint'>
        /// The X509 certificate thumbprint
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<ClientRootCertificateGetResponse> GetAsync(string virtualNetworkName, string certificateThumbprint, CancellationToken cancellationToken)
        {
            // Validate
            if (virtualNetworkName == null)
            {
                throw new ArgumentNullException("virtualNetworkName");
            }
            if (certificateThumbprint == null)
            {
                throw new ArgumentNullException("certificateThumbprint");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("virtualNetworkName", virtualNetworkName);
                tracingParameters.Add("certificateThumbprint", certificateThumbprint);
                Tracing.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/networking/" + virtualNetworkName + "/gateway/clientrootcertificates/" + certificateThumbprint;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ClientRootCertificateGetResponse result = new ClientRootCertificateGetResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result.Certificate = responseContent;
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List Client Root Certificates operation returns a list of all
        /// the client root certificates that are associated with the
        /// specified virtual network in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn205130.aspx
        /// for more information)
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to the list client root certificates request
        /// </returns>
        public async Task<ClientRootCertificateListResponse> ListAsync(string virtualNetworkName, CancellationToken cancellationToken)
        {
            // Validate
            if (virtualNetworkName == null)
            {
                throw new ArgumentNullException("virtualNetworkName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("virtualNetworkName", virtualNetworkName);
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/networking/" + virtualNetworkName + "/gateway/clientrootcertificates";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ClientRootCertificateListResponse result = new ClientRootCertificateListResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement clientRootCertificatesSequenceElement = responseDoc.Element(XName.Get("ClientRootCertificates", "http://schemas.microsoft.com/windowsazure"));
                    if (clientRootCertificatesSequenceElement != null)
                    {
                        foreach (XElement clientRootCertificatesElement in clientRootCertificatesSequenceElement.Elements(XName.Get("ClientRootCertificate", "http://schemas.microsoft.com/windowsazure")))
                        {
                            ClientRootCertificateListResponse.ClientRootCertificate clientRootCertificateInstance = new ClientRootCertificateListResponse.ClientRootCertificate();
                            result.ClientRootCertificates.Add(clientRootCertificateInstance);
                            
                            XElement expirationTimeElement = clientRootCertificatesElement.Element(XName.Get("ExpirationTime", "http://schemas.microsoft.com/windowsazure"));
                            if (expirationTimeElement != null)
                            {
                                DateTime expirationTimeInstance = DateTime.Parse(expirationTimeElement.Value, CultureInfo.InvariantCulture);
                                clientRootCertificateInstance.ExpirationTime = expirationTimeInstance;
                            }
                            
                            XElement subjectElement = clientRootCertificatesElement.Element(XName.Get("Subject", "http://schemas.microsoft.com/windowsazure"));
                            if (subjectElement != null)
                            {
                                string subjectInstance = subjectElement.Value;
                                clientRootCertificateInstance.Subject = subjectInstance;
                            }
                            
                            XElement thumbprintElement = clientRootCertificatesElement.Element(XName.Get("Thumbprint", "http://schemas.microsoft.com/windowsazure"));
                            if (thumbprintElement != null)
                            {
                                string thumbprintInstance = thumbprintElement.Value;
                                clientRootCertificateInstance.Thumbprint = thumbprintInstance;
                            }
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Upload Client Root Certificate operation is used to upload a
        /// new client root certificate to Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn205129.aspx
        /// for more information)
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Upload client certificate Virtual
        /// Network Gateway operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<GatewayOperationResponse> CreateAsync(string virtualNetworkName, ClientRootCertificateCreateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (virtualNetworkName == null)
            {
                throw new ArgumentNullException("virtualNetworkName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Certificate == null)
            {
                throw new ArgumentNullException("parameters.Certificate");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("virtualNetworkName", virtualNetworkName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/networking/" + virtualNetworkName + "/gateway/clientrootcertificates";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                requestContent = parameters.Certificate;
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GatewayOperationResponse result = new GatewayOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement gatewayOperationAsyncResponseElement = responseDoc.Element(XName.Get("GatewayOperationAsyncResponse", "http://schemas.microsoft.com/windowsazure"));
                    if (gatewayOperationAsyncResponseElement != null)
                    {
                        XElement idElement = gatewayOperationAsyncResponseElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                        if (idElement != null)
                        {
                            string idInstance = idElement.Value;
                            result.OperationId = idInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    public partial interface IGatewayOperations
    {
        /// <summary>
        /// To connect to, disconnect from, or test your connection to a local
        /// network site, access the connection resource representing the
        /// local network and specify Connect, Disconnect or Test to perform
        /// the desired operation.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154107.aspx
        /// for more information)
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='localNetworkSiteName'>
        /// The name of the site to connect to
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Virtual Network Gateway operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<GatewayOperationResponse> BeginConnectDisconnectOrTestingAsync(string virtualNetworkName, string localNetworkSiteName, GatewayConnectDisconnectOrTestParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// To connect to, disconnect from, or test your connection to a local
        /// network site, access the connection resource representing the
        /// local network and specify Connect, Disconnect or Test to perform
        /// the desired operation.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154107.aspx
        /// for more information)
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='localNetworkSiteName'>
        /// The name of the site to connect to
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Virtual Network Gateway operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        Task<GatewayGetOperationStatusResponse> ConnectDisconnectOrTestAsync(string virtualNetworkName, string localNetworkSiteName, GatewayConnectDisconnectOrTestParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// The Create Virtual network Gateway operation creates a new network
        /// gateways account in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154119.aspx
        /// for more information)
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Virtual Network Gateway operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<GatewayOperationResponse> BeginCreatingAsync(string virtualNetworkName, GatewayCreateParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// The Create Virtual network Gateway operation creates a new network
        /// gateways account in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154119.aspx
        /// for more information)
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Virtual Network Gateway operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        Task<GatewayGetOperationStatusResponse> CreateAsync(string virtualNetworkName, GatewayCreateParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// The Delete Virtual network Gateway operation deletes a network
        /// gateway for the specified virtual network in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154129.aspx
        /// for more information)
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<GatewayOperationResponse> BeginDeletingAsync(string virtualNetworkName, CancellationToken cancellationToken);
        
        /// <summary>
        /// The Delete Virtual network Gateway operation deletes a network
        /// gateway for the specified virtual network in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154129.aspx
        /// for more information)
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        Task<GatewayGetOperationStatusResponse> DeleteAsync(string virtualNetworkName, CancellationToken cancellationToken);
        
        /// <summary>
        /// The Failover Virtual network Gateway operation causes a network
        /// gateway failover for the specified virtual network in Windows
        /// Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154118.aspx
        /// for more information)
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network in Azure.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<GatewayOperationResponse> BeginFailoverAsync(string virtualNetworkName, CancellationToken cancellationToken);
        
        /// <summary>
        /// The Failover Virtual network Gateway operation causes a network
        /// gateway failover for the specified virtual network in Windows
        /// Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154118.aspx
        /// for more information)
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network in Azure.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        Task<GatewayGetOperationStatusResponse> FailoverAsync(string virtualNetworkName, CancellationToken cancellationToken);
        
        /// <summary>
        /// The Generate VPN Client Package creates a VPN client package for
        /// the specified virtual network and gateway in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn205126.aspx
        /// for more information)
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Virtual Network Gateway operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<GatewayOperationResponse> GenerateVpnClientPackageAsync(string virtualNetworkName, GatewayGenerateVpnClientPackageParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// The Get Virtual network Gateway operation gets information on the
        /// network gateway for the specified vitrual network in Windows
        /// Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154109.aspx
        /// for more information)
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<GatewayGetResponse> GetAsync(string virtualNetworkName, CancellationToken cancellationToken);
        
        /// <summary>
        /// The Get Device Configuration Script operation returns a script that
        /// you can use to configure local VPN devices to connect to the
        /// gateway.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154115.aspx
        /// for more information)
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='parameters'>
        /// The parameters for the GetDeviceConfigurationScript request
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The configuration script returned from the get device configuration
        /// script request
        /// </returns>
        Task<GatewayGetDeviceConfigurationScriptResponse> GetDeviceConfigurationScriptAsync(string virtualNetworkName, GatewayGetDeviceConfigurationScriptParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// The Get Virtual network Gateway operation status gets information
        /// on the status of network gateway operations in Windows Azure.
        /// (see http://msdn.microsoft.com/en-us/library/windowsazure/jj154112.aspx
        /// for more information)
        /// </summary>
        /// <param name='operationId'>
        /// The id  of the virtualnetwork operation
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        Task<GatewayGetOperationStatusResponse> GetOperationStatusAsync(string operationId, CancellationToken cancellationToken);
        
        /// <summary>
        /// The Get Virtual network Gateway shared key operation gets the
        /// shared key on the virtual network gateway for the specified
        /// vitrual network connection to the specified local network in
        /// Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154122.aspx
        /// for more information)
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='localNetworkName'>
        /// The name of the local network
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to the get shared key request
        /// </returns>
        Task<GatewayGetSharedKeyResponse> GetSharedKeyAsync(string virtualNetworkName, string localNetworkName, CancellationToken cancellationToken);
        
        /// <summary>
        /// The List Connections operation returns a list of the local network
        /// connections that can be accessed through the gateway.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154120.aspx
        /// for more information)
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to a ListConnections request to a Virtual Network
        /// Gateway
        /// </returns>
        Task<GatewayListConnectionsResponse> ListConnectionsAsync(string virtualNetworkName, CancellationToken cancellationToken);
        
        /// <summary>
        /// The List Virtual Network Gateway Supported Devices operation lists
        /// the supported, on-premise network devices that can connect to the
        /// gateway.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154102.aspx
        /// for more information)
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The respoonse to the get supported platform configuration request
        /// </returns>
        Task<GatewayListSupportedDevicesResponse> ListSupportedDevicesAsync(CancellationToken cancellationToken);
        
        /// <summary>
        /// The Reset Virtual network Gateway shared key operation resets the
        /// shared key on the virtual network gateway for the specified
        /// vitrual network connection to the specified local network in
        /// Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='localNetworkName'>
        /// The name of the local network
        /// </param>
        /// <param name='parameters'>
        /// The parameters to the Virtual Network Gateway Reset Shared Key
        /// request
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<GatewayOperationResponse> BeginResetSharedKeyAsync(string virtualNetworkName, string localNetworkName, GatewayResetSharedKeyParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// The Reset Virtual network Gateway shared key operation resets the
        /// shared key on the virtual network gateway for the specified
        /// vitrual network connection to the specified local network in
        /// Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='localNetworkName'>
        /// The name of the local network
        /// </param>
        /// <param name='parameters'>
        /// The parameters to the Virtual Network Gateway Reset Shared Key
        /// request
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        Task<GatewayGetOperationStatusResponse> ResetSharedKeyAsync(string virtualNetworkName, string localNetworkName, GatewayResetSharedKeyParameters parameters, CancellationToken cancellationToken);
    }
    
    public static partial class GatewayOperationsExtensions
    {
        /// <summary>
        /// To connect to, disconnect from, or test your connection to a local
        /// network site, access the connection resource representing the
        /// local network and specify Connect, Disconnect or Test to perform
        /// the desired operation.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154107.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IGatewayOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='localNetworkSiteName'>
        /// The name of the site to connect to
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Virtual Network Gateway operation.
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static GatewayOperationResponse BeginConnectDisconnectOrTesting(this IGatewayOperations operations, string virtualNetworkName, string localNetworkSiteName, GatewayConnectDisconnectOrTestParameters parameters)
        {
            try
            {
                return operations.BeginConnectDisconnectOrTestingAsync(virtualNetworkName, localNetworkSiteName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// To connect to, disconnect from, or test your connection to a local
        /// network site, access the connection resource representing the
        /// local network and specify Connect, Disconnect or Test to perform
        /// the desired operation.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154107.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IGatewayOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='localNetworkSiteName'>
        /// The name of the site to connect to
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Virtual Network Gateway operation.
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<GatewayOperationResponse> BeginConnectDisconnectOrTestingAsync(this IGatewayOperations operations, string virtualNetworkName, string localNetworkSiteName, GatewayConnectDisconnectOrTestParameters parameters)
        {
            return operations.BeginConnectDisconnectOrTestingAsync(virtualNetworkName, localNetworkSiteName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// To connect to, disconnect from, or test your connection to a local
        /// network site, access the connection resource representing the
        /// local network and specify Connect, Disconnect or Test to perform
        /// the desired operation.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154107.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IGatewayOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='localNetworkSiteName'>
        /// The name of the site to connect to
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Virtual Network Gateway operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static GatewayGetOperationStatusResponse ConnectDisconnectOrTest(this IGatewayOperations operations, string virtualNetworkName, string localNetworkSiteName, GatewayConnectDisconnectOrTestParameters parameters)
        {
            try
            {
                return operations.ConnectDisconnectOrTestAsync(virtualNetworkName, localNetworkSiteName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// To connect to, disconnect from, or test your connection to a local
        /// network site, access the connection resource representing the
        /// local network and specify Connect, Disconnect or Test to perform
        /// the desired operation.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154107.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IGatewayOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='localNetworkSiteName'>
        /// The name of the site to connect to
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Virtual Network Gateway operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<GatewayGetOperationStatusResponse> ConnectDisconnectOrTestAsync(this IGatewayOperations operations, string virtualNetworkName, string localNetworkSiteName, GatewayConnectDisconnectOrTestParameters parameters)
        {
            return operations.ConnectDisconnectOrTestAsync(virtualNetworkName, localNetworkSiteName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Create Virtual network Gateway operation creates a new network
        /// gateways account in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154119.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IGatewayOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Virtual Network Gateway operation.
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static GatewayOperationResponse BeginCreating(this IGatewayOperations operations, string virtualNetworkName, GatewayCreateParameters parameters)
        {
            try
            {
                return operations.BeginCreatingAsync(virtualNetworkName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Create Virtual network Gateway operation creates a new network
        /// gateways account in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154119.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IGatewayOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Virtual Network Gateway operation.
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<GatewayOperationResponse> BeginCreatingAsync(this IGatewayOperations operations, string virtualNetworkName, GatewayCreateParameters parameters)
        {
            return operations.BeginCreatingAsync(virtualNetworkName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Create Virtual network Gateway operation creates a new network
        /// gateways account in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154119.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IGatewayOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Virtual Network Gateway operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static GatewayGetOperationStatusResponse Create(this IGatewayOperations operations, string virtualNetworkName, GatewayCreateParameters parameters)
        {
            try
            {
                return operations.CreateAsync(virtualNetworkName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Create Virtual network Gateway operation creates a new network
        /// gateways account in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154119.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IGatewayOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Virtual Network Gateway operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<GatewayGetOperationStatusResponse> CreateAsync(this IGatewayOperations operations, string virtualNetworkName, GatewayCreateParameters parameters)
        {
            return operations.CreateAsync(virtualNetworkName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Delete Virtual network Gateway operation deletes a network
        /// gateway for the specified virtual network in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154129.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IGatewayOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network.
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static GatewayOperationResponse BeginDeleting(this IGatewayOperations operations, string virtualNetworkName)
        {
            try
            {
                return operations.BeginDeletingAsync(virtualNetworkName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Delete Virtual network Gateway operation deletes a network
        /// gateway for the specified virtual network in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154129.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IGatewayOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network.
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<GatewayOperationResponse> BeginDeletingAsync(this IGatewayOperations operations, string virtualNetworkName)
        {
            return operations.BeginDeletingAsync(virtualNetworkName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Delete Virtual network Gateway operation deletes a network
        /// gateway for the specified virtual network in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154129.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IGatewayOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static GatewayGetOperationStatusResponse Delete(this IGatewayOperations operations, string virtualNetworkName)
        {
            try
            {
                return operations.DeleteAsync(virtualNetworkName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Delete Virtual network Gateway operation deletes a network
        /// gateway for the specified virtual network in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154129.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IGatewayOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<GatewayGetOperationStatusResponse> DeleteAsync(this IGatewayOperations operations, string virtualNetworkName)
        {
            return operations.DeleteAsync(virtualNetworkName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Failover Virtual network Gateway operation causes a network
        /// gateway failover for the specified virtual network in Windows
        /// Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154118.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IGatewayOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network in Azure.
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static GatewayOperationResponse BeginFailover(this IGatewayOperations operations, string virtualNetworkName)
        {
            try
            {
                return operations.BeginFailoverAsync(virtualNetworkName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Failover Virtual network Gateway operation causes a network
        /// gateway failover for the specified virtual network in Windows
        /// Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154118.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IGatewayOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network in Azure.
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<GatewayOperationResponse> BeginFailoverAsync(this IGatewayOperations operations, string virtualNetworkName)
        {
            return operations.BeginFailoverAsync(virtualNetworkName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Failover Virtual network Gateway operation causes a network
        /// gateway failover for the specified virtual network in Windows
        /// Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154118.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IGatewayOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network in Azure.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static GatewayGetOperationStatusResponse Failover(this IGatewayOperations operations, string virtualNetworkName)
        {
            try
            {
                return operations.FailoverAsync(virtualNetworkName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Failover Virtual network Gateway operation causes a network
        /// gateway failover for the specified virtual network in Windows
        /// Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154118.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IGatewayOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network in Azure.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<GatewayGetOperationStatusResponse> FailoverAsync(this IGatewayOperations operations, string virtualNetworkName)
        {
            return operations.FailoverAsync(virtualNetworkName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Generate VPN Client Package creates a VPN client package for
        /// the specified virtual network and gateway in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn205126.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IGatewayOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Virtual Network Gateway operation.
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static GatewayOperationResponse GenerateVpnClientPackage(this IGatewayOperations operations, string virtualNetworkName, GatewayGenerateVpnClientPackageParameters parameters)
        {
            try
            {
                return operations.GenerateVpnClientPackageAsync(virtualNetworkName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Generate VPN Client Package creates a VPN client package for
        /// the specified virtual network and gateway in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn205126.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IGatewayOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Virtual Network Gateway operation.
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<GatewayOperationResponse> GenerateVpnClientPackageAsync(this IGatewayOperations operations, string virtualNetworkName, GatewayGenerateVpnClientPackageParameters parameters)
        {
            return operations.GenerateVpnClientPackageAsync(virtualNetworkName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Virtual network Gateway operation gets information on the
        /// network gateway for the specified vitrual network in Windows
        /// Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154109.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IGatewayOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static GatewayGetResponse Get(this IGatewayOperations operations, string virtualNetworkName)
        {
            try
            {
                return operations.GetAsync(virtualNetworkName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Get Virtual network Gateway operation gets information on the
        /// network gateway for the specified vitrual network in Windows
        /// Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154109.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IGatewayOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<GatewayGetResponse> GetAsync(this IGatewayOperations operations, string virtualNetworkName)
        {
            return operations.GetAsync(virtualNetworkName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Device Configuration Script operation returns a script that
        /// you can use to configure local VPN devices to connect to the
        /// gateway.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154115.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IGatewayOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='parameters'>
        /// The parameters for the GetDeviceConfigurationScript request
        /// </param>
        /// <returns>
        /// The configuration script returned from the get device configuration
        /// script request
        /// </returns>
        public static GatewayGetDeviceConfigurationScriptResponse GetDeviceConfigurationScript(this IGatewayOperations operations, string virtualNetworkName, GatewayGetDeviceConfigurationScriptParameters parameters)
        {
            try
            {
                return operations.GetDeviceConfigurationScriptAsync(virtualNetworkName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Get Device Configuration Script operation returns a script that
        /// you can use to configure local VPN devices to connect to the
        /// gateway.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154115.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IGatewayOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='parameters'>
        /// The parameters for the GetDeviceConfigurationScript request
        /// </param>
        /// <returns>
        /// The configuration script returned from the get device configuration
        /// script request
        /// </returns>
        public static Task<GatewayGetDeviceConfigurationScriptResponse> GetDeviceConfigurationScriptAsync(this IGatewayOperations operations, string virtualNetworkName, GatewayGetDeviceConfigurationScriptParameters parameters)
        {
            return operations.GetDeviceConfigurationScriptAsync(virtualNetworkName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Virtual network Gateway operation status gets information
        /// on the status of network gateway operations in Windows Azure.
        /// (see http://msdn.microsoft.com/en-us/library/windowsazure/jj154112.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IGatewayOperations.
        /// </param>
        /// <param name='operationId'>
        /// The id  of the virtualnetwork operation
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static GatewayGetOperationStatusResponse GetOperationStatus(this IGatewayOperations operations, string operationId)
        {
            try
            {
                return operations.GetOperationStatusAsync(operationId).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Get Virtual network Gateway operation status gets information
        /// on the status of network gateway operations in Windows Azure.
        /// (see http://msdn.microsoft.com/en-us/library/windowsazure/jj154112.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IGatewayOperations.
        /// </param>
        /// <param name='operationId'>
        /// The id  of the virtualnetwork operation
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<GatewayGetOperationStatusResponse> GetOperationStatusAsync(this IGatewayOperations operations, string operationId)
        {
            return operations.GetOperationStatusAsync(operationId, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Virtual network Gateway shared key operation gets the
        /// shared key on the virtual network gateway for the specified
        /// vitrual network connection to the specified local network in
        /// Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154122.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IGatewayOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='localNetworkName'>
        /// The name of the local network
        /// </param>
        /// <returns>
        /// The response to the get shared key request
        /// </returns>
        public static GatewayGetSharedKeyResponse GetSharedKey(this IGatewayOperations operations, string virtualNetworkName, string localNetworkName)
        {
            try
            {
                return operations.GetSharedKeyAsync(virtualNetworkName, localNetworkName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Get Virtual network Gateway shared key operation gets the
        /// shared key on the virtual network gateway for the specified
        /// vitrual network connection to the specified local network in
        /// Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154122.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IGatewayOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='localNetworkName'>
        /// The name of the local network
        /// </param>
        /// <returns>
        /// The response to the get shared key request
        /// </returns>
        public static Task<GatewayGetSharedKeyResponse> GetSharedKeyAsync(this IGatewayOperations operations, string virtualNetworkName, string localNetworkName)
        {
            return operations.GetSharedKeyAsync(virtualNetworkName, localNetworkName, CancellationToken.None);
        }
        
        /// <summary>
        /// The List Connections operation returns a list of the local network
        /// connections that can be accessed through the gateway.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154120.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IGatewayOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <returns>
        /// The response to a ListConnections request to a Virtual Network
        /// Gateway
        /// </returns>
        public static GatewayListConnectionsResponse ListConnections(this IGatewayOperations operations, string virtualNetworkName)
        {
            try
            {
                return operations.ListConnectionsAsync(virtualNetworkName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The List Connections operation returns a list of the local network
        /// connections that can be accessed through the gateway.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154120.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IGatewayOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <returns>
        /// The response to a ListConnections request to a Virtual Network
        /// Gateway
        /// </returns>
        public static Task<GatewayListConnectionsResponse> ListConnectionsAsync(this IGatewayOperations operations, string virtualNetworkName)
        {
            return operations.ListConnectionsAsync(virtualNetworkName, CancellationToken.None);
        }
        
        /// <summary>
        /// The List Virtual Network Gateway Supported Devices operation lists
        /// the supported, on-premise network devices that can connect to the
        /// gateway.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154102.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IGatewayOperations.
        /// </param>
        /// <returns>
        /// The respoonse to the get supported platform configuration request
        /// </returns>
        public static GatewayListSupportedDevicesResponse ListSupportedDevices(this IGatewayOperations operations)
        {
            try
            {
                return operations.ListSupportedDevicesAsync().Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The List Virtual Network Gateway Supported Devices operation lists
        /// the supported, on-premise network devices that can connect to the
        /// gateway.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154102.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IGatewayOperations.
        /// </param>
        /// <returns>
        /// The respoonse to the get supported platform configuration request
        /// </returns>
        public static Task<GatewayListSupportedDevicesResponse> ListSupportedDevicesAsync(this IGatewayOperations operations)
        {
            return operations.ListSupportedDevicesAsync(CancellationToken.None);
        }
        
        /// <summary>
        /// The Reset Virtual network Gateway shared key operation resets the
        /// shared key on the virtual network gateway for the specified
        /// vitrual network connection to the specified local network in
        /// Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IGatewayOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='localNetworkName'>
        /// The name of the local network
        /// </param>
        /// <param name='parameters'>
        /// The parameters to the Virtual Network Gateway Reset Shared Key
        /// request
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static GatewayOperationResponse BeginResetSharedKey(this IGatewayOperations operations, string virtualNetworkName, string localNetworkName, GatewayResetSharedKeyParameters parameters)
        {
            try
            {
                return operations.BeginResetSharedKeyAsync(virtualNetworkName, localNetworkName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Reset Virtual network Gateway shared key operation resets the
        /// shared key on the virtual network gateway for the specified
        /// vitrual network connection to the specified local network in
        /// Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IGatewayOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='localNetworkName'>
        /// The name of the local network
        /// </param>
        /// <param name='parameters'>
        /// The parameters to the Virtual Network Gateway Reset Shared Key
        /// request
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<GatewayOperationResponse> BeginResetSharedKeyAsync(this IGatewayOperations operations, string virtualNetworkName, string localNetworkName, GatewayResetSharedKeyParameters parameters)
        {
            return operations.BeginResetSharedKeyAsync(virtualNetworkName, localNetworkName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Reset Virtual network Gateway shared key operation resets the
        /// shared key on the virtual network gateway for the specified
        /// vitrual network connection to the specified local network in
        /// Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IGatewayOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='localNetworkName'>
        /// The name of the local network
        /// </param>
        /// <param name='parameters'>
        /// The parameters to the Virtual Network Gateway Reset Shared Key
        /// request
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static GatewayGetOperationStatusResponse ResetSharedKey(this IGatewayOperations operations, string virtualNetworkName, string localNetworkName, GatewayResetSharedKeyParameters parameters)
        {
            try
            {
                return operations.ResetSharedKeyAsync(virtualNetworkName, localNetworkName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Reset Virtual network Gateway shared key operation resets the
        /// shared key on the virtual network gateway for the specified
        /// vitrual network connection to the specified local network in
        /// Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.IGatewayOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='localNetworkName'>
        /// The name of the local network
        /// </param>
        /// <param name='parameters'>
        /// The parameters to the Virtual Network Gateway Reset Shared Key
        /// request
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<GatewayGetOperationStatusResponse> ResetSharedKeyAsync(this IGatewayOperations operations, string virtualNetworkName, string localNetworkName, GatewayResetSharedKeyParameters parameters)
        {
            return operations.ResetSharedKeyAsync(virtualNetworkName, localNetworkName, parameters, CancellationToken.None);
        }
    }
    
    internal partial class GatewayOperations : IServiceOperations<VirtualNetworkManagementClient>, IGatewayOperations
    {
        /// <summary>
        /// Initializes a new instance of the GatewayOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal GatewayOperations(VirtualNetworkManagementClient client)
        {
            this._client = client;
        }
        
        private VirtualNetworkManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.VirtualNetworkManagementClient.
        /// </summary>
        public VirtualNetworkManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// To connect to, disconnect from, or test your connection to a local
        /// network site, access the connection resource representing the
        /// local network and specify Connect, Disconnect or Test to perform
        /// the desired operation.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154107.aspx
        /// for more information)
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='localNetworkSiteName'>
        /// The name of the site to connect to
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Virtual Network Gateway operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<GatewayOperationResponse> BeginConnectDisconnectOrTestingAsync(string virtualNetworkName, string localNetworkSiteName, GatewayConnectDisconnectOrTestParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (virtualNetworkName == null)
            {
                throw new ArgumentNullException("virtualNetworkName");
            }
            if (localNetworkSiteName == null)
            {
                throw new ArgumentNullException("localNetworkSiteName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("virtualNetworkName", virtualNetworkName);
                tracingParameters.Add("localNetworkSiteName", localNetworkSiteName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "BeginConnectDisconnectOrTestingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/networking/" + virtualNetworkName + "/gateway/connection/" + localNetworkSiteName;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement updateConnectionElement = new XElement(XName.Get("UpdateConnection", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(updateConnectionElement);
                
                XElement operationElement = new XElement(XName.Get("Operation", "http://schemas.microsoft.com/windowsazure"));
                operationElement.Value = parameters.Operation.ToString();
                updateConnectionElement.Add(operationElement);
                
                if (parameters.IPAddress != null)
                {
                    XElement iPAddressElement = new XElement(XName.Get("IPAddress", "http://schemas.microsoft.com/windowsazure"));
                    iPAddressElement.Value = parameters.IPAddress;
                    updateConnectionElement.Add(iPAddressElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GatewayOperationResponse result = new GatewayOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement gatewayOperationAsyncResponseElement = responseDoc.Element(XName.Get("GatewayOperationAsyncResponse", "http://schemas.microsoft.com/windowsazure"));
                    if (gatewayOperationAsyncResponseElement != null)
                    {
                        XElement idElement = gatewayOperationAsyncResponseElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                        if (idElement != null)
                        {
                            string idInstance = idElement.Value;
                            result.OperationId = idInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// To connect to, disconnect from, or test your connection to a local
        /// network site, access the connection resource representing the
        /// local network and specify Connect, Disconnect or Test to perform
        /// the desired operation.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154107.aspx
        /// for more information)
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='localNetworkSiteName'>
        /// The name of the site to connect to
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Virtual Network Gateway operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<GatewayGetOperationStatusResponse> ConnectDisconnectOrTestAsync(string virtualNetworkName, string localNetworkSiteName, GatewayConnectDisconnectOrTestParameters parameters, CancellationToken cancellationToken)
        {
            VirtualNetworkManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("virtualNetworkName", virtualNetworkName);
                tracingParameters.Add("localNetworkSiteName", localNetworkSiteName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "ConnectDisconnectOrTestAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                GatewayOperationResponse originalResponse = await client.Gateways.BeginConnectDisconnectOrTestingAsync(virtualNetworkName, localNetworkSiteName, parameters, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                GatewayGetOperationStatusResponse result = await client.Gateways.GetOperationStatusAsync(originalResponse.OperationId, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = 100;
                while (result.Status == GatewayOperationStatus.InProgress)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.Gateways.GetOperationStatusAsync(originalResponse.OperationId, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = 30;
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Create Virtual network Gateway operation creates a new network
        /// gateways account in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154119.aspx
        /// for more information)
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Virtual Network Gateway operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<GatewayOperationResponse> BeginCreatingAsync(string virtualNetworkName, GatewayCreateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (virtualNetworkName == null)
            {
                throw new ArgumentNullException("virtualNetworkName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("virtualNetworkName", virtualNetworkName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "BeginCreatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/networking/" + virtualNetworkName + "/gateway";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement createGatewayParametersElement = new XElement(XName.Get("CreateGatewayParameters", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(createGatewayParametersElement);
                
                XElement gatewayTypeElement = new XElement(XName.Get("GatewayType", "http://schemas.microsoft.com/windowsazure"));
                gatewayTypeElement.Value = parameters.GatewayType.ToString();
                createGatewayParametersElement.Add(gatewayTypeElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GatewayOperationResponse result = new GatewayOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement gatewayOperationAsyncResponseElement = responseDoc.Element(XName.Get("GatewayOperationAsyncResponse", "http://schemas.microsoft.com/windowsazure"));
                    if (gatewayOperationAsyncResponseElement != null)
                    {
                        XElement idElement = gatewayOperationAsyncResponseElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                        if (idElement != null)
                        {
                            string idInstance = idElement.Value;
                            result.OperationId = idInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Create Virtual network Gateway operation creates a new network
        /// gateways account in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154119.aspx
        /// for more information)
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Virtual Network Gateway operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<GatewayGetOperationStatusResponse> CreateAsync(string virtualNetworkName, GatewayCreateParameters parameters, CancellationToken cancellationToken)
        {
            VirtualNetworkManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("virtualNetworkName", virtualNetworkName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                GatewayOperationResponse originalResponse = await client.Gateways.BeginCreatingAsync(virtualNetworkName, parameters, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                GatewayGetOperationStatusResponse result = await client.Gateways.GetOperationStatusAsync(originalResponse.OperationId, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = 100;
                while (result.Status == GatewayOperationStatus.InProgress)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.Gateways.GetOperationStatusAsync(originalResponse.OperationId, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = 30;
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Delete Virtual network Gateway operation deletes a network
        /// gateway for the specified virtual network in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154129.aspx
        /// for more information)
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<GatewayOperationResponse> BeginDeletingAsync(string virtualNetworkName, CancellationToken cancellationToken)
        {
            // Validate
            if (virtualNetworkName == null)
            {
                throw new ArgumentNullException("virtualNetworkName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("virtualNetworkName", virtualNetworkName);
                Tracing.Enter(invocationId, this, "BeginDeletingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/networking/" + virtualNetworkName + "/gateway";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GatewayOperationResponse result = new GatewayOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement gatewayOperationAsyncResponseElement = responseDoc.Element(XName.Get("GatewayOperationAsyncResponse", "http://schemas.microsoft.com/windowsazure"));
                    if (gatewayOperationAsyncResponseElement != null)
                    {
                        XElement idElement = gatewayOperationAsyncResponseElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                        if (idElement != null)
                        {
                            string idInstance = idElement.Value;
                            result.OperationId = idInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Delete Virtual network Gateway operation deletes a network
        /// gateway for the specified virtual network in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154129.aspx
        /// for more information)
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<GatewayGetOperationStatusResponse> DeleteAsync(string virtualNetworkName, CancellationToken cancellationToken)
        {
            VirtualNetworkManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("virtualNetworkName", virtualNetworkName);
                Tracing.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                GatewayOperationResponse originalResponse = await client.Gateways.BeginDeletingAsync(virtualNetworkName, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                GatewayGetOperationStatusResponse result = await client.Gateways.GetOperationStatusAsync(originalResponse.OperationId, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = 100;
                while (result.Status == GatewayOperationStatus.InProgress)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.Gateways.GetOperationStatusAsync(originalResponse.OperationId, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = 30;
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Failover Virtual network Gateway operation causes a network
        /// gateway failover for the specified virtual network in Windows
        /// Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154118.aspx
        /// for more information)
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network in Azure.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<GatewayOperationResponse> BeginFailoverAsync(string virtualNetworkName, CancellationToken cancellationToken)
        {
            // Validate
            if (virtualNetworkName == null)
            {
                throw new ArgumentNullException("virtualNetworkName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("virtualNetworkName", virtualNetworkName);
                Tracing.Enter(invocationId, this, "BeginFailoverAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/networking/" + virtualNetworkName + "/gateway";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                requestContent = "<?xml version=\"1.0\" encoding=\"utf-8\"?><UpdateGateway xmlns=\"http://schemas.microsoft.com/windowsazure\"><UpdateGatewayOperation>Failover</UpdateGatewayOperation></UpdateGateway>";
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GatewayOperationResponse result = new GatewayOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement gatewayOperationAsyncResponseElement = responseDoc.Element(XName.Get("GatewayOperationAsyncResponse", "http://schemas.microsoft.com/windowsazure"));
                    if (gatewayOperationAsyncResponseElement != null)
                    {
                        XElement idElement = gatewayOperationAsyncResponseElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                        if (idElement != null)
                        {
                            string idInstance = idElement.Value;
                            result.OperationId = idInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Failover Virtual network Gateway operation causes a network
        /// gateway failover for the specified virtual network in Windows
        /// Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154118.aspx
        /// for more information)
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network in Azure.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<GatewayGetOperationStatusResponse> FailoverAsync(string virtualNetworkName, CancellationToken cancellationToken)
        {
            VirtualNetworkManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("virtualNetworkName", virtualNetworkName);
                Tracing.Enter(invocationId, this, "FailoverAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                GatewayOperationResponse originalResponse = await client.Gateways.BeginFailoverAsync(virtualNetworkName, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                GatewayGetOperationStatusResponse result = await client.Gateways.GetOperationStatusAsync(originalResponse.OperationId, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = 100;
                while (result.Status == GatewayOperationStatus.InProgress)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.Gateways.GetOperationStatusAsync(originalResponse.OperationId, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = 30;
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Generate VPN Client Package creates a VPN client package for
        /// the specified virtual network and gateway in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn205126.aspx
        /// for more information)
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Virtual Network Gateway operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<GatewayOperationResponse> GenerateVpnClientPackageAsync(string virtualNetworkName, GatewayGenerateVpnClientPackageParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (virtualNetworkName == null)
            {
                throw new ArgumentNullException("virtualNetworkName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("virtualNetworkName", virtualNetworkName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "GenerateVpnClientPackageAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/networking/" + virtualNetworkName + "/gateway/vpnclientpackage";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement vpnClientParametersElement = new XElement(XName.Get("VpnClientParameters", ""));
                requestDoc.Add(vpnClientParametersElement);
                
                XElement processorArchitectureElement = new XElement(XName.Get("ProcessorArchitecture", ""));
                processorArchitectureElement.Value = parameters.ProcessorArchitecture.ToString();
                vpnClientParametersElement.Add(processorArchitectureElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GatewayOperationResponse result = new GatewayOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement gatewayOperationAsyncResponseElement = responseDoc.Element(XName.Get("GatewayOperationAsyncResponse", "http://schemas.microsoft.com/windowsazure"));
                    if (gatewayOperationAsyncResponseElement != null)
                    {
                        XElement idElement = gatewayOperationAsyncResponseElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                        if (idElement != null)
                        {
                            string idInstance = idElement.Value;
                            result.OperationId = idInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Virtual network Gateway operation gets information on the
        /// network gateway for the specified vitrual network in Windows
        /// Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154109.aspx
        /// for more information)
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<GatewayGetResponse> GetAsync(string virtualNetworkName, CancellationToken cancellationToken)
        {
            // Validate
            if (virtualNetworkName == null)
            {
                throw new ArgumentNullException("virtualNetworkName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("virtualNetworkName", virtualNetworkName);
                Tracing.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/networking/" + virtualNetworkName + "/gateway";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GatewayGetResponse result = new GatewayGetResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement gatewayElement = responseDoc.Element(XName.Get("Gateway", "http://schemas.microsoft.com/windowsazure"));
                    if (gatewayElement != null)
                    {
                        XElement stateElement = gatewayElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                        if (stateElement != null)
                        {
                            string stateInstance = stateElement.Value;
                            result.State = stateInstance;
                        }
                        
                        XElement vIPAddressElement = gatewayElement.Element(XName.Get("VIPAddress", "http://schemas.microsoft.com/windowsazure"));
                        if (vIPAddressElement != null)
                        {
                            string vIPAddressInstance = vIPAddressElement.Value;
                            result.VipAddress = vIPAddressInstance;
                        }
                        
                        XElement lastEventElement = gatewayElement.Element(XName.Get("LastEvent", "http://schemas.microsoft.com/windowsazure"));
                        if (lastEventElement != null)
                        {
                            GatewayEvent lastEventInstance = new GatewayEvent();
                            result.LastEvent = lastEventInstance;
                            
                            XElement timestampElement = lastEventElement.Element(XName.Get("Timestamp", "http://schemas.microsoft.com/windowsazure"));
                            if (timestampElement != null)
                            {
                                DateTime timestampInstance = DateTime.Parse(timestampElement.Value, CultureInfo.InvariantCulture);
                                lastEventInstance.Timestamp = timestampInstance;
                            }
                            
                            XElement idElement = lastEventElement.Element(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                            if (idElement != null)
                            {
                                string idInstance = idElement.Value;
                                lastEventInstance.Id = idInstance;
                            }
                            
                            XElement messageElement = lastEventElement.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                            if (messageElement != null)
                            {
                                string messageInstance = messageElement.Value;
                                lastEventInstance.Message = messageInstance;
                            }
                            
                            XElement dataElement = lastEventElement.Element(XName.Get("Data", "http://schemas.microsoft.com/windowsazure"));
                            if (dataElement != null)
                            {
                                string dataInstance = dataElement.Value;
                                lastEventInstance.Data = dataInstance;
                            }
                        }
                        
                        XElement gatewayTypeElement = gatewayElement.Element(XName.Get("GatewayType", "http://schemas.microsoft.com/windowsazure"));
                        if (gatewayTypeElement != null)
                        {
                            GatewayType gatewayTypeInstance = (GatewayType)Enum.Parse(typeof(GatewayType), gatewayTypeElement.Value, false);
                            result.GatewayType = gatewayTypeInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Device Configuration Script operation returns a script that
        /// you can use to configure local VPN devices to connect to the
        /// gateway.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154115.aspx
        /// for more information)
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='parameters'>
        /// The parameters for the GetDeviceConfigurationScript request
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The configuration script returned from the get device configuration
        /// script request
        /// </returns>
        public async Task<GatewayGetDeviceConfigurationScriptResponse> GetDeviceConfigurationScriptAsync(string virtualNetworkName, GatewayGetDeviceConfigurationScriptParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (virtualNetworkName == null)
            {
                throw new ArgumentNullException("virtualNetworkName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("virtualNetworkName", virtualNetworkName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "GetDeviceConfigurationScriptAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/networking/" + virtualNetworkName + "/gateway/vpndeviceconfigurationscript?vendor=" + parameters.Vendor + "&platform=" + parameters.Platform + "&OSfamily=" + parameters.OSFamily;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GatewayGetDeviceConfigurationScriptResponse result = new GatewayGetDeviceConfigurationScriptResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result.ConfigurationScript = responseContent;
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Virtual network Gateway operation status gets information
        /// on the status of network gateway operations in Windows Azure.
        /// (see http://msdn.microsoft.com/en-us/library/windowsazure/jj154112.aspx
        /// for more information)
        /// </summary>
        /// <param name='operationId'>
        /// The id  of the virtualnetwork operation
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<GatewayGetOperationStatusResponse> GetOperationStatusAsync(string operationId, CancellationToken cancellationToken)
        {
            // Validate
            if (operationId == null)
            {
                throw new ArgumentNullException("operationId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationId", operationId);
                Tracing.Enter(invocationId, this, "GetOperationStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/networking/operation/" + operationId;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GatewayGetOperationStatusResponse result = new GatewayGetOperationStatusResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement gatewayOperationElement = responseDoc.Element(XName.Get("GatewayOperation", "http://schemas.microsoft.com/windowsazure"));
                    if (gatewayOperationElement != null)
                    {
                        XElement idElement = gatewayOperationElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                        if (idElement != null)
                        {
                            string idInstance = idElement.Value;
                            result.Id = idInstance;
                        }
                        
                        XElement statusElement = gatewayOperationElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                        if (statusElement != null)
                        {
                            GatewayOperationStatus statusInstance = (GatewayOperationStatus)Enum.Parse(typeof(GatewayOperationStatus), statusElement.Value, false);
                            result.Status = statusInstance;
                        }
                        
                        XElement httpStatusCodeElement = gatewayOperationElement.Element(XName.Get("HttpStatusCode", "http://schemas.microsoft.com/windowsazure"));
                        if (httpStatusCodeElement != null)
                        {
                            HttpStatusCode httpStatusCodeInstance = (HttpStatusCode)Enum.Parse(typeof(HttpStatusCode), httpStatusCodeElement.Value, false);
                            result.HttpStatusCode = httpStatusCodeInstance;
                        }
                        
                        XElement errorElement = gatewayOperationElement.Element(XName.Get("Error", "http://schemas.microsoft.com/windowsazure"));
                        if (errorElement != null)
                        {
                            GatewayGetOperationStatusResponse.ErrorDetails errorInstance = new GatewayGetOperationStatusResponse.ErrorDetails();
                            result.Error = errorInstance;
                            
                            XElement codeElement = errorElement.Element(XName.Get("Code", "http://schemas.microsoft.com/windowsazure"));
                            if (codeElement != null)
                            {
                                string codeInstance = codeElement.Value;
                                errorInstance.Code = codeInstance;
                            }
                            
                            XElement messageElement = errorElement.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                            if (messageElement != null)
                            {
                                string messageInstance = messageElement.Value;
                                errorInstance.Message = messageInstance;
                            }
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Virtual network Gateway shared key operation gets the
        /// shared key on the virtual network gateway for the specified
        /// vitrual network connection to the specified local network in
        /// Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154122.aspx
        /// for more information)
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='localNetworkName'>
        /// The name of the local network
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to the get shared key request
        /// </returns>
        public async Task<GatewayGetSharedKeyResponse> GetSharedKeyAsync(string virtualNetworkName, string localNetworkName, CancellationToken cancellationToken)
        {
            // Validate
            if (virtualNetworkName == null)
            {
                throw new ArgumentNullException("virtualNetworkName");
            }
            if (localNetworkName == null)
            {
                throw new ArgumentNullException("localNetworkName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("virtualNetworkName", virtualNetworkName);
                tracingParameters.Add("localNetworkName", localNetworkName);
                Tracing.Enter(invocationId, this, "GetSharedKeyAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/networking/" + virtualNetworkName + "/gateway/connection/" + localNetworkName + "/sharedkey";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GatewayGetSharedKeyResponse result = new GatewayGetSharedKeyResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement sharedKeyElement = responseDoc.Element(XName.Get("SharedKey", "http://schemas.microsoft.com/windowsazure"));
                    if (sharedKeyElement != null)
                    {
                        XElement valueElement = sharedKeyElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure"));
                        if (valueElement != null)
                        {
                            string valueInstance = valueElement.Value;
                            result.SharedKey = valueInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List Connections operation returns a list of the local network
        /// connections that can be accessed through the gateway.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154120.aspx
        /// for more information)
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to a ListConnections request to a Virtual Network
        /// Gateway
        /// </returns>
        public async Task<GatewayListConnectionsResponse> ListConnectionsAsync(string virtualNetworkName, CancellationToken cancellationToken)
        {
            // Validate
            if (virtualNetworkName == null)
            {
                throw new ArgumentNullException("virtualNetworkName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("virtualNetworkName", virtualNetworkName);
                Tracing.Enter(invocationId, this, "ListConnectionsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/networking/" + virtualNetworkName + "/gateway/connections";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GatewayListConnectionsResponse result = new GatewayListConnectionsResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement connectionsSequenceElement = responseDoc.Element(XName.Get("Connections", "http://schemas.microsoft.com/windowsazure"));
                    if (connectionsSequenceElement != null)
                    {
                        foreach (XElement connectionsElement in connectionsSequenceElement.Elements(XName.Get("Connection", "http://schemas.microsoft.com/windowsazure")))
                        {
                            GatewayListConnectionsResponse.GatewayConnection connectionInstance = new GatewayListConnectionsResponse.GatewayConnection();
                            result.Connections.Add(connectionInstance);
                            
                            XElement localNetworkSiteNameElement = connectionsElement.Element(XName.Get("LocalNetworkSiteName", "http://schemas.microsoft.com/windowsazure"));
                            if (localNetworkSiteNameElement != null)
                            {
                                string localNetworkSiteNameInstance = localNetworkSiteNameElement.Value;
                                connectionInstance.LocalNetworkSiteName = localNetworkSiteNameInstance;
                            }
                            
                            XElement connectivityStateElement = connectionsElement.Element(XName.Get("ConnectivityState", "http://schemas.microsoft.com/windowsazure"));
                            if (connectivityStateElement != null)
                            {
                                GatewayConnectivityState connectivityStateInstance = (GatewayConnectivityState)Enum.Parse(typeof(GatewayConnectivityState), connectivityStateElement.Value, false);
                                connectionInstance.ConnectivityState = connectivityStateInstance;
                            }
                            
                            XElement lastEventElement = connectionsElement.Element(XName.Get("LastEvent", "http://schemas.microsoft.com/windowsazure"));
                            if (lastEventElement != null)
                            {
                                GatewayEvent lastEventInstance = new GatewayEvent();
                                connectionInstance.LastEvent = lastEventInstance;
                                
                                XElement timestampElement = lastEventElement.Element(XName.Get("Timestamp", "http://schemas.microsoft.com/windowsazure"));
                                if (timestampElement != null)
                                {
                                    DateTime timestampInstance = DateTime.Parse(timestampElement.Value, CultureInfo.InvariantCulture);
                                    lastEventInstance.Timestamp = timestampInstance;
                                }
                                
                                XElement idElement = lastEventElement.Element(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                                if (idElement != null)
                                {
                                    string idInstance = idElement.Value;
                                    lastEventInstance.Id = idInstance;
                                }
                                
                                XElement messageElement = lastEventElement.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                                if (messageElement != null)
                                {
                                    string messageInstance = messageElement.Value;
                                    lastEventInstance.Message = messageInstance;
                                }
                                
                                XElement dataElement = lastEventElement.Element(XName.Get("Data", "http://schemas.microsoft.com/windowsazure"));
                                if (dataElement != null)
                                {
                                    string dataInstance = dataElement.Value;
                                    lastEventInstance.Data = dataInstance;
                                }
                            }
                            
                            XElement ingressBytesTransferredElement = connectionsElement.Element(XName.Get("IngressBytesTransferred", "http://schemas.microsoft.com/windowsazure"));
                            if (ingressBytesTransferredElement != null)
                            {
                                long ingressBytesTransferredInstance = new long();
                                connectionInstance.IngressBytesTransferred = ingressBytesTransferredInstance;
                            }
                            
                            XElement egressBytesTransferredElement = connectionsElement.Element(XName.Get("EgressBytesTransferred", "http://schemas.microsoft.com/windowsazure"));
                            if (egressBytesTransferredElement != null)
                            {
                                long egressBytesTransferredInstance = new long();
                                connectionInstance.EgressBytesTransferred = egressBytesTransferredInstance;
                            }
                            
                            XElement lastConnectionEstablishedElement = connectionsElement.Element(XName.Get("LastConnectionEstablished", "http://schemas.microsoft.com/windowsazure"));
                            if (lastConnectionEstablishedElement != null)
                            {
                                DateTime lastConnectionEstablishedInstance = DateTime.Parse(lastConnectionEstablishedElement.Value, CultureInfo.InvariantCulture);
                                connectionInstance.LastConnectionEstablished = lastConnectionEstablishedInstance;
                            }
                            
                            XElement allocatedIPAddressesSequenceElement = connectionsElement.Element(XName.Get("AllocatedIPAddresses", "http://schemas.microsoft.com/windowsazure"));
                            if (allocatedIPAddressesSequenceElement != null)
                            {
                                foreach (XElement allocatedIPAddressesElement in allocatedIPAddressesSequenceElement.Elements(XName.Get("string", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    connectionInstance.AllocatedIPAddresses.Add(allocatedIPAddressesElement.Value);
                                }
                            }
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List Virtual Network Gateway Supported Devices operation lists
        /// the supported, on-premise network devices that can connect to the
        /// gateway.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154102.aspx
        /// for more information)
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The respoonse to the get supported platform configuration request
        /// </returns>
        public async Task<GatewayListSupportedDevicesResponse> ListSupportedDevicesAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                Tracing.Enter(invocationId, this, "ListSupportedDevicesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/networking/supporteddevices";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GatewayListSupportedDevicesResponse result = new GatewayListSupportedDevicesResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement vpnDeviceListElement = responseDoc.Element(XName.Get("VpnDeviceList", ""));
                    if (vpnDeviceListElement != null)
                    {
                        XAttribute versionAttribute = vpnDeviceListElement.Attribute(XName.Get("version", ""));
                        if (versionAttribute != null)
                        {
                            result.Version = versionAttribute.Value;
                        }
                        
                        if (vpnDeviceListElement != null)
                        {
                            foreach (XElement vendorsElement in vpnDeviceListElement.Elements(XName.Get("Vendor", "")))
                            {
                                GatewayListSupportedDevicesResponse.Vendor vendorInstance = new GatewayListSupportedDevicesResponse.Vendor();
                                result.Vendors.Add(vendorInstance);
                                
                                XAttribute nameAttribute = vendorsElement.Attribute(XName.Get("name", ""));
                                if (nameAttribute != null)
                                {
                                    vendorInstance.Name = nameAttribute.Value;
                                }
                                
                                if (vendorsElement != null)
                                {
                                    foreach (XElement platformsElement in vendorsElement.Elements(XName.Get("Platform", "")))
                                    {
                                        GatewayListSupportedDevicesResponse.Platform platformInstance = new GatewayListSupportedDevicesResponse.Platform();
                                        vendorInstance.Platforms.Add(platformInstance);
                                        
                                        XAttribute nameAttribute2 = platformsElement.Attribute(XName.Get("name", ""));
                                        if (nameAttribute2 != null)
                                        {
                                            platformInstance.Name = nameAttribute2.Value;
                                        }
                                        
                                        if (platformsElement != null)
                                        {
                                            foreach (XElement oSFamiliesElement in platformsElement.Elements(XName.Get("OSFamily", "")))
                                            {
                                                GatewayListSupportedDevicesResponse.OSFamily oSFamilyInstance = new GatewayListSupportedDevicesResponse.OSFamily();
                                                platformInstance.OSFamilies.Add(oSFamilyInstance);
                                                
                                                XAttribute nameAttribute3 = oSFamiliesElement.Attribute(XName.Get("name", ""));
                                                if (nameAttribute3 != null)
                                                {
                                                    oSFamilyInstance.Name = nameAttribute3.Value;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Reset Virtual network Gateway shared key operation resets the
        /// shared key on the virtual network gateway for the specified
        /// vitrual network connection to the specified local network in
        /// Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='localNetworkName'>
        /// The name of the local network
        /// </param>
        /// <param name='parameters'>
        /// The parameters to the Virtual Network Gateway Reset Shared Key
        /// request
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<GatewayOperationResponse> BeginResetSharedKeyAsync(string virtualNetworkName, string localNetworkName, GatewayResetSharedKeyParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (virtualNetworkName == null)
            {
                throw new ArgumentNullException("virtualNetworkName");
            }
            if (localNetworkName == null)
            {
                throw new ArgumentNullException("localNetworkName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("virtualNetworkName", virtualNetworkName);
                tracingParameters.Add("localNetworkName", localNetworkName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "BeginResetSharedKeyAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/networking/" + virtualNetworkName + "/gateway/connection/" + localNetworkName + "/sharedkey";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement resetSharedKeyElement = new XElement(XName.Get("ResetSharedKey", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(resetSharedKeyElement);
                
                XElement keyLengthElement = new XElement(XName.Get("KeyLength", "http://schemas.microsoft.com/windowsazure"));
                keyLengthElement.Value = parameters.KeyLength.ToString();
                resetSharedKeyElement.Add(keyLengthElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GatewayOperationResponse result = new GatewayOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement gatewayOperationAsyncResponseElement = responseDoc.Element(XName.Get("GatewayOperationAsyncResponse", "http://schemas.microsoft.com/windowsazure"));
                    if (gatewayOperationAsyncResponseElement != null)
                    {
                        XElement idElement = gatewayOperationAsyncResponseElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                        if (idElement != null)
                        {
                            string idInstance = idElement.Value;
                            result.OperationId = idInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Reset Virtual network Gateway shared key operation resets the
        /// shared key on the virtual network gateway for the specified
        /// vitrual network connection to the specified local network in
        /// Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network for this gateway
        /// </param>
        /// <param name='localNetworkName'>
        /// The name of the local network
        /// </param>
        /// <param name='parameters'>
        /// The parameters to the Virtual Network Gateway Reset Shared Key
        /// request
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<GatewayGetOperationStatusResponse> ResetSharedKeyAsync(string virtualNetworkName, string localNetworkName, GatewayResetSharedKeyParameters parameters, CancellationToken cancellationToken)
        {
            VirtualNetworkManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("virtualNetworkName", virtualNetworkName);
                tracingParameters.Add("localNetworkName", localNetworkName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "ResetSharedKeyAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                GatewayOperationResponse originalResponse = await client.Gateways.BeginResetSharedKeyAsync(virtualNetworkName, localNetworkName, parameters, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                GatewayGetOperationStatusResponse result = await client.Gateways.GetOperationStatusAsync(originalResponse.OperationId, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = 100;
                while (result.Status == GatewayOperationStatus.InProgress)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.Gateways.GetOperationStatusAsync(originalResponse.OperationId, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = 30;
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
    }
    
    public partial interface INetworkOperations
    {
        /// <summary>
        /// The Get Network Configuration operation retrieves the network
        /// configuration file for the given subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157196.aspx
        /// for more information)
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response structure for the Server get configuration operation
        /// </returns>
        Task<NetworkGetConfigurationResponse> GetConfigurationAsync(CancellationToken cancellationToken);
        
        /// <summary>
        /// The List Virtual network sites operation retrieves the virtual
        /// networks configured for the subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157185.aspx
        /// for more information)
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response structure for the Server List operation
        /// </returns>
        Task<NetworkListResponse> ListAsync(CancellationToken cancellationToken);
        
        /// <summary>
        /// The Set Network Configuration operation asynchronously configures
        /// the virtual network  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157181.aspx
        /// for more information)
        /// </summary>
        /// <param name='parameters'>
        /// The updated network configuration
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> SetConfigurationAsync(NetworkSetConfigurationParameters parameters, CancellationToken cancellationToken);
    }
    
    public static partial class NetworkOperationsExtensions
    {
        /// <summary>
        /// The Get Network Configuration operation retrieves the network
        /// configuration file for the given subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157196.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.INetworkOperations.
        /// </param>
        /// <returns>
        /// The response structure for the Server get configuration operation
        /// </returns>
        public static NetworkGetConfigurationResponse GetConfiguration(this INetworkOperations operations)
        {
            try
            {
                return operations.GetConfigurationAsync().Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Get Network Configuration operation retrieves the network
        /// configuration file for the given subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157196.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.INetworkOperations.
        /// </param>
        /// <returns>
        /// The response structure for the Server get configuration operation
        /// </returns>
        public static Task<NetworkGetConfigurationResponse> GetConfigurationAsync(this INetworkOperations operations)
        {
            return operations.GetConfigurationAsync(CancellationToken.None);
        }
        
        /// <summary>
        /// The List Virtual network sites operation retrieves the virtual
        /// networks configured for the subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157185.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.INetworkOperations.
        /// </param>
        /// <returns>
        /// The response structure for the Server List operation
        /// </returns>
        public static NetworkListResponse List(this INetworkOperations operations)
        {
            try
            {
                return operations.ListAsync().Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The List Virtual network sites operation retrieves the virtual
        /// networks configured for the subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157185.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.INetworkOperations.
        /// </param>
        /// <returns>
        /// The response structure for the Server List operation
        /// </returns>
        public static Task<NetworkListResponse> ListAsync(this INetworkOperations operations)
        {
            return operations.ListAsync(CancellationToken.None);
        }
        
        /// <summary>
        /// The Set Network Configuration operation asynchronously configures
        /// the virtual network  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157181.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.INetworkOperations.
        /// </param>
        /// <param name='parameters'>
        /// The updated network configuration
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse SetConfiguration(this INetworkOperations operations, NetworkSetConfigurationParameters parameters)
        {
            try
            {
                return operations.SetConfigurationAsync(parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Set Network Configuration operation asynchronously configures
        /// the virtual network  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157181.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.INetworkOperations.
        /// </param>
        /// <param name='parameters'>
        /// The updated network configuration
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> SetConfigurationAsync(this INetworkOperations operations, NetworkSetConfigurationParameters parameters)
        {
            return operations.SetConfigurationAsync(parameters, CancellationToken.None);
        }
    }
    
    internal partial class NetworkOperations : IServiceOperations<VirtualNetworkManagementClient>, INetworkOperations
    {
        /// <summary>
        /// Initializes a new instance of the NetworkOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal NetworkOperations(VirtualNetworkManagementClient client)
        {
            this._client = client;
        }
        
        private VirtualNetworkManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.VirtualNetworks.VirtualNetworkManagementClient.
        /// </summary>
        public VirtualNetworkManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The Get Network Configuration operation retrieves the network
        /// configuration file for the given subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157196.aspx
        /// for more information)
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response structure for the Server get configuration operation
        /// </returns>
        public async Task<NetworkGetConfigurationResponse> GetConfigurationAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                Tracing.Enter(invocationId, this, "GetConfigurationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/networking/media";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    NetworkGetConfigurationResponse result = new NetworkGetConfigurationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement networkConfigurationElement = responseDoc.Element(XName.Get("NetworkConfiguration", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                    if (networkConfigurationElement != null)
                    {
                        XElement virtualNetworkConfigurationElement = networkConfigurationElement.Element(XName.Get("VirtualNetworkConfiguration", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                        if (virtualNetworkConfigurationElement != null)
                        {
                            XElement dnsElement = virtualNetworkConfigurationElement.Element(XName.Get("Dns", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                            if (dnsElement != null)
                            {
                                XElement dnsServersSequenceElement = dnsElement.Element(XName.Get("DnsServers", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                                if (dnsServersSequenceElement != null)
                                {
                                    foreach (XElement dnsServersElement in dnsServersSequenceElement.Elements(XName.Get("DnsServer", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration")))
                                    {
                                        NetworkGetConfigurationResponse.DnsServer dnsServerInstance = new NetworkGetConfigurationResponse.DnsServer();
                                        result.DnsServers.Add(dnsServerInstance);
                                        
                                        XAttribute nameAttribute = dnsServersElement.Attribute(XName.Get("name", ""));
                                        if (nameAttribute != null)
                                        {
                                            dnsServerInstance.Name = nameAttribute.Value;
                                        }
                                        
                                        XAttribute iPAddressAttribute = dnsServersElement.Attribute(XName.Get("IPAddress", ""));
                                        if (iPAddressAttribute != null)
                                        {
                                            dnsServerInstance.IPAddress = iPAddressAttribute.Value;
                                        }
                                    }
                                }
                            }
                            
                            XElement localNetworkSitesSequenceElement = virtualNetworkConfigurationElement.Element(XName.Get("LocalNetworkSites", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                            if (localNetworkSitesSequenceElement != null)
                            {
                                foreach (XElement localNetworkSitesElement in localNetworkSitesSequenceElement.Elements(XName.Get("LocalNetworkSite", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration")))
                                {
                                    NetworkGetConfigurationResponse.LocalNetworkSite localNetworkSiteInstance = new NetworkGetConfigurationResponse.LocalNetworkSite();
                                    result.LocalNetworkSites.Add(localNetworkSiteInstance);
                                    
                                    XAttribute nameAttribute2 = localNetworkSitesElement.Attribute(XName.Get("name", ""));
                                    if (nameAttribute2 != null)
                                    {
                                        localNetworkSiteInstance.Name = nameAttribute2.Value;
                                    }
                                    
                                    XElement addressSpaceSequenceElement = localNetworkSitesElement.Element(XName.Get("AddressSpace", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                                    if (addressSpaceSequenceElement != null)
                                    {
                                        foreach (XElement addressSpaceElement in addressSpaceSequenceElement.Elements(XName.Get("AddressPrefix", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration")))
                                        {
                                            localNetworkSiteInstance.AddressSpace.Add(addressSpaceElement.Value);
                                        }
                                    }
                                    
                                    XElement vPNGatewayAddressElement = localNetworkSitesElement.Element(XName.Get("VPNGatewayAddress", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                                    if (vPNGatewayAddressElement != null)
                                    {
                                        string vPNGatewayAddressInstance = vPNGatewayAddressElement.Value;
                                        localNetworkSiteInstance.VpnGatewayAddress = vPNGatewayAddressInstance;
                                    }
                                }
                            }
                            
                            XElement virtualNetworkSitesSequenceElement = virtualNetworkConfigurationElement.Element(XName.Get("VirtualNetworkSites", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                            if (virtualNetworkSitesSequenceElement != null)
                            {
                                foreach (XElement virtualNetworkSitesElement in virtualNetworkSitesSequenceElement.Elements(XName.Get("VirtualNetworkSite", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration")))
                                {
                                    NetworkGetConfigurationResponse.VirtualNetworkSite virtualNetworkSiteInstance = new NetworkGetConfigurationResponse.VirtualNetworkSite();
                                    result.VirtualNetworkSites.Add(virtualNetworkSiteInstance);
                                    
                                    XAttribute nameAttribute3 = virtualNetworkSitesElement.Attribute(XName.Get("name", ""));
                                    if (nameAttribute3 != null)
                                    {
                                        virtualNetworkSiteInstance.Name = nameAttribute3.Value;
                                    }
                                    
                                    XAttribute affinityGroupAttribute = virtualNetworkSitesElement.Attribute(XName.Get("AffinityGroup", ""));
                                    if (affinityGroupAttribute != null)
                                    {
                                        virtualNetworkSiteInstance.AffinityGroup = affinityGroupAttribute.Value;
                                    }
                                    
                                    XElement labelElement = virtualNetworkSitesElement.Element(XName.Get("Label", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                                    if (labelElement != null)
                                    {
                                        string labelInstance = labelElement.Value;
                                        virtualNetworkSiteInstance.Label = labelInstance;
                                    }
                                    
                                    XElement addressSpaceSequenceElement2 = virtualNetworkSitesElement.Element(XName.Get("AddressSpace", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                                    if (addressSpaceSequenceElement2 != null)
                                    {
                                        foreach (XElement addressSpaceElement2 in addressSpaceSequenceElement2.Elements(XName.Get("AddressPrefix", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration")))
                                        {
                                            virtualNetworkSiteInstance.AddressSpace.Add(addressSpaceElement2.Value);
                                        }
                                    }
                                    
                                    XElement subnetsSequenceElement = virtualNetworkSitesElement.Element(XName.Get("Subnets", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                                    if (subnetsSequenceElement != null)
                                    {
                                        foreach (XElement subnetsElement in subnetsSequenceElement.Elements(XName.Get("Subnet", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration")))
                                        {
                                            NetworkGetConfigurationResponse.Subnet subnetInstance = new NetworkGetConfigurationResponse.Subnet();
                                            virtualNetworkSiteInstance.Subnets.Add(subnetInstance);
                                            
                                            XAttribute nameAttribute4 = subnetsElement.Attribute(XName.Get("name", ""));
                                            if (nameAttribute4 != null)
                                            {
                                                subnetInstance.Name = nameAttribute4.Value;
                                            }
                                            
                                            XElement addressPrefixElement = subnetsElement.Element(XName.Get("AddressPrefix", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                                            if (addressPrefixElement != null)
                                            {
                                                string addressPrefixInstance = addressPrefixElement.Value;
                                                subnetInstance.AddressPrefix = addressPrefixInstance;
                                            }
                                        }
                                    }
                                    
                                    XElement dnsServersRefSequenceElement = virtualNetworkSitesElement.Element(XName.Get("DnsServersRef", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                                    if (dnsServersRefSequenceElement != null)
                                    {
                                        foreach (XElement dnsServersRefElement in dnsServersRefSequenceElement.Elements(XName.Get("DnsServerRef", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration")))
                                        {
                                            NetworkGetConfigurationResponse.DnsServerReference dnsServerRefInstance = new NetworkGetConfigurationResponse.DnsServerReference();
                                            virtualNetworkSiteInstance.DnsServerReferences.Add(dnsServerRefInstance);
                                            
                                            XAttribute nameAttribute5 = dnsServersRefElement.Attribute(XName.Get("name", ""));
                                            if (nameAttribute5 != null)
                                            {
                                                dnsServerRefInstance.Name = nameAttribute5.Value;
                                            }
                                        }
                                    }
                                    
                                    XElement gatewayElement = virtualNetworkSitesElement.Element(XName.Get("Gateway", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                                    if (gatewayElement != null)
                                    {
                                        NetworkGetConfigurationResponse.Gateway gatewayInstance = new NetworkGetConfigurationResponse.Gateway();
                                        virtualNetworkSiteInstance.Gateway = gatewayInstance;
                                        
                                        XAttribute profileAttribute = gatewayElement.Attribute(XName.Get("profile", ""));
                                        if (profileAttribute != null)
                                        {
                                            gatewayInstance.Profile = profileAttribute.Value;
                                        }
                                        
                                        XElement vPMClientAddressPoolSequenceElement = gatewayElement.Element(XName.Get("VPMClientAddressPool", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                                        if (vPMClientAddressPoolSequenceElement != null)
                                        {
                                            foreach (XElement vPMClientAddressPoolElement in vPMClientAddressPoolSequenceElement.Elements(XName.Get("AddressPrefix", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration")))
                                            {
                                                gatewayInstance.VpnClientAddressPool.Add(vPMClientAddressPoolElement.Value);
                                            }
                                        }
                                        
                                        XElement connectionsToLocalNetworkSequenceElement = gatewayElement.Element(XName.Get("ConnectionsToLocalNetwork", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                                        if (connectionsToLocalNetworkSequenceElement != null)
                                        {
                                            foreach (XElement connectionsToLocalNetworkElement in connectionsToLocalNetworkSequenceElement.Elements(XName.Get("LocalNetworkSiteRef", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration")))
                                            {
                                                NetworkGetConfigurationResponse.LocalNetworkSiteReference localNetworkSiteRefInstance = new NetworkGetConfigurationResponse.LocalNetworkSiteReference();
                                                gatewayInstance.ConnectionsToLocalNetwork.Add(localNetworkSiteRefInstance);
                                                
                                                XAttribute nameAttribute6 = connectionsToLocalNetworkElement.Attribute(XName.Get("name", ""));
                                                if (nameAttribute6 != null)
                                                {
                                                    localNetworkSiteRefInstance.Name = nameAttribute6.Value;
                                                }
                                                
                                                XElement connectionTypeElement = connectionsToLocalNetworkElement.Element(XName.Get("ConnectionType", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                                                if (connectionTypeElement != null)
                                                {
                                                    LocalNetworkConnectionType connectionTypeInstance = VirtualNetworkManagementClient.ParseLocalNetworkConnectionType(connectionTypeElement.Value);
                                                    localNetworkSiteRefInstance.ConnectionType = connectionTypeInstance;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List Virtual network sites operation retrieves the virtual
        /// networks configured for the subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157185.aspx
        /// for more information)
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response structure for the Server List operation
        /// </returns>
        public async Task<NetworkListResponse> ListAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/networking/virtualnetwork";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    NetworkListResponse result = new NetworkListResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement virtualNetworkSitesSequenceElement = responseDoc.Element(XName.Get("VirtualNetworkSites", "http://schemas.microsoft.com/windowsazure"));
                    if (virtualNetworkSitesSequenceElement != null)
                    {
                        foreach (XElement virtualNetworkSitesElement in virtualNetworkSitesSequenceElement.Elements(XName.Get("VirtualNetworkSite", "http://schemas.microsoft.com/windowsazure")))
                        {
                            NetworkListResponse.VirtualNetworkSite virtualNetworkSiteInstance = new NetworkListResponse.VirtualNetworkSite();
                            result.VirtualNetworkSites.Add(virtualNetworkSiteInstance);
                            
                            XElement nameElement = virtualNetworkSitesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            if (nameElement != null)
                            {
                                string nameInstance = nameElement.Value;
                                virtualNetworkSiteInstance.Name = nameInstance;
                            }
                            
                            XElement labelElement = virtualNetworkSitesElement.Element(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                            if (labelElement != null)
                            {
                                string labelInstance = labelElement.Value;
                                virtualNetworkSiteInstance.Label = labelInstance;
                            }
                            
                            XElement idElement = virtualNetworkSitesElement.Element(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                            if (idElement != null)
                            {
                                string idInstance = idElement.Value;
                                virtualNetworkSiteInstance.Id = idInstance;
                            }
                            
                            XElement affinityGroupElement = virtualNetworkSitesElement.Element(XName.Get("AffinityGroup", "http://schemas.microsoft.com/windowsazure"));
                            if (affinityGroupElement != null)
                            {
                                string affinityGroupInstance = affinityGroupElement.Value;
                                virtualNetworkSiteInstance.AffinityGroup = affinityGroupInstance;
                            }
                            
                            XElement stateElement = virtualNetworkSitesElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                            if (stateElement != null)
                            {
                                string stateInstance = stateElement.Value;
                                virtualNetworkSiteInstance.State = stateInstance;
                            }
                            
                            XElement addressSpaceElement = virtualNetworkSitesElement.Element(XName.Get("AddressSpace", "http://schemas.microsoft.com/windowsazure"));
                            if (addressSpaceElement != null)
                            {
                                NetworkListResponse.AddressSpace addressSpaceInstance = new NetworkListResponse.AddressSpace();
                                virtualNetworkSiteInstance.AddressSpace = addressSpaceInstance;
                                
                                XElement addressPrefixesSequenceElement = addressSpaceElement.Element(XName.Get("AddressPrefixes", "http://schemas.microsoft.com/windowsazure"));
                                if (addressPrefixesSequenceElement != null)
                                {
                                    foreach (XElement addressPrefixesElement in addressPrefixesSequenceElement.Elements(XName.Get("AddressPrefix", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        addressSpaceInstance.AddressPrefixes.Add(addressPrefixesElement.Value);
                                    }
                                }
                            }
                            
                            XElement subnetsSequenceElement = virtualNetworkSitesElement.Element(XName.Get("Subnets", "http://schemas.microsoft.com/windowsazure"));
                            if (subnetsSequenceElement != null)
                            {
                                foreach (XElement subnetsElement in subnetsSequenceElement.Elements(XName.Get("Subnet", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    NetworkListResponse.Subnet subnetInstance = new NetworkListResponse.Subnet();
                                    virtualNetworkSiteInstance.Subnets.Add(subnetInstance);
                                    
                                    XElement nameElement2 = subnetsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                    if (nameElement2 != null)
                                    {
                                        string nameInstance2 = nameElement2.Value;
                                        subnetInstance.Name = nameInstance2;
                                    }
                                    
                                    XElement addressPrefixElement = subnetsElement.Element(XName.Get("AddressPrefix", "http://schemas.microsoft.com/windowsazure"));
                                    if (addressPrefixElement != null)
                                    {
                                        string addressPrefixInstance = addressPrefixElement.Value;
                                        subnetInstance.AddressPrefix = addressPrefixInstance;
                                    }
                                }
                            }
                            
                            XElement dnsServersSequenceElement = virtualNetworkSitesElement.Element(XName.Get("DnsServers", "http://schemas.microsoft.com/windowsazure"));
                            if (dnsServersSequenceElement != null)
                            {
                                foreach (XElement dnsServersElement in dnsServersSequenceElement.Elements(XName.Get("DnsServer", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    NetworkListResponse.DnsServer dnsServerInstance = new NetworkListResponse.DnsServer();
                                    virtualNetworkSiteInstance.DnsServers.Add(dnsServerInstance);
                                    
                                    XElement nameElement3 = dnsServersElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                    if (nameElement3 != null)
                                    {
                                        string nameInstance3 = nameElement3.Value;
                                        dnsServerInstance.Name = nameInstance3;
                                    }
                                    
                                    XElement addressElement = dnsServersElement.Element(XName.Get("Address", "http://schemas.microsoft.com/windowsazure"));
                                    if (addressElement != null)
                                    {
                                        string addressInstance = addressElement.Value;
                                        dnsServerInstance.Address = addressInstance;
                                    }
                                }
                            }
                            
                            XElement gatewayElement = virtualNetworkSitesElement.Element(XName.Get("Gateway", "http://schemas.microsoft.com/windowsazure"));
                            if (gatewayElement != null)
                            {
                                NetworkListResponse.Gateway gatewayInstance = new NetworkListResponse.Gateway();
                                virtualNetworkSiteInstance.Gateway = gatewayInstance;
                                
                                XElement profileElement = gatewayElement.Element(XName.Get("Profile", "http://schemas.microsoft.com/windowsazure"));
                                if (profileElement != null)
                                {
                                    string profileInstance = profileElement.Value;
                                    gatewayInstance.Profile = profileInstance;
                                }
                                
                                XElement sitesSequenceElement = gatewayElement.Element(XName.Get("Sites", "http://schemas.microsoft.com/windowsazure"));
                                if (sitesSequenceElement != null)
                                {
                                    foreach (XElement sitesElement in sitesSequenceElement.Elements(XName.Get("LocalNetworkSite", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        NetworkListResponse.LocalNetworkSite localNetworkSiteInstance = new NetworkListResponse.LocalNetworkSite();
                                        gatewayInstance.Sites.Add(localNetworkSiteInstance);
                                        
                                        XElement nameElement4 = sitesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                        if (nameElement4 != null)
                                        {
                                            string nameInstance4 = nameElement4.Value;
                                            localNetworkSiteInstance.Name = nameInstance4;
                                        }
                                        
                                        XElement vpnGatewayAddressElement = sitesElement.Element(XName.Get("VpnGatewayAddress", "http://schemas.microsoft.com/windowsazure"));
                                        if (vpnGatewayAddressElement != null)
                                        {
                                            string vpnGatewayAddressInstance = vpnGatewayAddressElement.Value;
                                            localNetworkSiteInstance.VpnGatewayAddress = vpnGatewayAddressInstance;
                                        }
                                        
                                        XElement addressSpaceElement2 = sitesElement.Element(XName.Get("AddressSpace", "http://schemas.microsoft.com/windowsazure"));
                                        if (addressSpaceElement2 != null)
                                        {
                                            NetworkListResponse.AddressSpace addressSpaceInstance2 = new NetworkListResponse.AddressSpace();
                                            localNetworkSiteInstance.AddressSpace = addressSpaceInstance2;
                                            
                                            XElement addressPrefixesSequenceElement2 = addressSpaceElement2.Element(XName.Get("AddressPrefixes", "http://schemas.microsoft.com/windowsazure"));
                                            if (addressPrefixesSequenceElement2 != null)
                                            {
                                                foreach (XElement addressPrefixesElement2 in addressPrefixesSequenceElement2.Elements(XName.Get("AddressPrefix", "http://schemas.microsoft.com/windowsazure")))
                                                {
                                                    addressSpaceInstance2.AddressPrefixes.Add(addressPrefixesElement2.Value);
                                                }
                                            }
                                        }
                                        
                                        XElement connectionsSequenceElement = sitesElement.Element(XName.Get("Connections", "http://schemas.microsoft.com/windowsazure"));
                                        if (connectionsSequenceElement != null)
                                        {
                                            foreach (XElement connectionsElement in connectionsSequenceElement.Elements(XName.Get("Connection", "http://schemas.microsoft.com/windowsazure")))
                                            {
                                                NetworkListResponse.Connection connectionInstance = new NetworkListResponse.Connection();
                                                localNetworkSiteInstance.Connections.Add(connectionInstance);
                                                
                                                XElement typeElement = connectionsElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                                                if (typeElement != null)
                                                {
                                                    LocalNetworkConnectionType typeInstance = VirtualNetworkManagementClient.ParseLocalNetworkConnectionType(typeElement.Value);
                                                    connectionInstance.Type = typeInstance;
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                XElement vPNClientAddressPoolElement = gatewayElement.Element(XName.Get("VPNClientAddressPool", "http://schemas.microsoft.com/windowsazure"));
                                if (vPNClientAddressPoolElement != null)
                                {
                                    NetworkListResponse.VPNClientAddressPool vPNClientAddressPoolInstance = new NetworkListResponse.VPNClientAddressPool();
                                    gatewayInstance.VPNClientAddressPool = vPNClientAddressPoolInstance;
                                    
                                    XElement addressPrefixesSequenceElement3 = vPNClientAddressPoolElement.Element(XName.Get("AddressPrefixes", "http://schemas.microsoft.com/windowsazure"));
                                    if (addressPrefixesSequenceElement3 != null)
                                    {
                                        foreach (XElement addressPrefixesElement3 in addressPrefixesSequenceElement3.Elements(XName.Get("AddressPrefix", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            vPNClientAddressPoolInstance.AddressPrefixes.Add(addressPrefixesElement3.Value);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Set Network Configuration operation asynchronously configures
        /// the virtual network  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157181.aspx
        /// for more information)
        /// </summary>
        /// <param name='parameters'>
        /// The updated network configuration
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard storage response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> SetConfigurationAsync(NetworkSetConfigurationParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            foreach (NetworkSetConfigurationParameters.DnsServer dnsServersParameterItem in parameters.DnsServers)
            {
                if (dnsServersParameterItem.IPAddress == null)
                {
                    throw new ArgumentNullException("parameters.DnsServers.IPAddress");
                }
            }
            foreach (NetworkSetConfigurationParameters.LocalNetworkSite localNetworkSitesParameterItem in parameters.LocalNetworkSites)
            {
                if (localNetworkSitesParameterItem.Name == null)
                {
                    throw new ArgumentNullException("parameters.LocalNetworkSites.Name");
                }
            }
            foreach (NetworkSetConfigurationParameters.VirtualNetworkSite virtualNetworkSitesParameterItem in parameters.VirtualNetworkSites)
            {
                if (virtualNetworkSitesParameterItem.Name == null)
                {
                    throw new ArgumentNullException("parameters.VirtualNetworkSites.Name");
                }
                if (virtualNetworkSitesParameterItem.Label == null)
                {
                    throw new ArgumentNullException("parameters.VirtualNetworkSites.Label");
                }
                foreach (NetworkSetConfigurationParameters.Subnet subnetsParameterItem in virtualNetworkSitesParameterItem.Subnets)
                {
                    if (subnetsParameterItem.Name == null)
                    {
                        throw new ArgumentNullException("parameters.VirtualNetworkSites.Subnets.Name");
                    }
                    if (subnetsParameterItem.AddressPrefix == null)
                    {
                        throw new ArgumentNullException("parameters.VirtualNetworkSites.Subnets.AddressPrefix");
                    }
                }
                foreach (NetworkSetConfigurationParameters.DnsServerReference dnsServerReferencesParameterItem in virtualNetworkSitesParameterItem.DnsServerReferences)
                {
                    if (dnsServerReferencesParameterItem.Name == null)
                    {
                        throw new ArgumentNullException("parameters.VirtualNetworkSites.DnsServerReferences.Name");
                    }
                }
                if (virtualNetworkSitesParameterItem.Gateway != null)
                {
                    if (virtualNetworkSitesParameterItem.Gateway.Profile == null)
                    {
                        throw new ArgumentNullException("parameters.VirtualNetworkSites.Gateway.Profile");
                    }
                    foreach (NetworkSetConfigurationParameters.LocalNetworkSiteReference connectionsToLocalNetworkParameterItem in virtualNetworkSitesParameterItem.Gateway.ConnectionsToLocalNetwork)
                    {
                        if (connectionsToLocalNetworkParameterItem.Name == null)
                        {
                            throw new ArgumentNullException("parameters.VirtualNetworkSites.Gateway.ConnectionsToLocalNetwork.Name");
                        }
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "SetConfigurationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/networking/media";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement networkConfigurationElement = new XElement(XName.Get("NetworkConfiguration", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                requestDoc.Add(networkConfigurationElement);
                
                XElement virtualNetworkConfigurationElement = new XElement(XName.Get("VirtualNetworkConfiguration", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                networkConfigurationElement.Add(virtualNetworkConfigurationElement);
                
                XElement dnsElement = new XElement(XName.Get("Dns", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                virtualNetworkConfigurationElement.Add(dnsElement);
                
                if (parameters.DnsServers != null)
                {
                    XElement dnsServersSequenceElement = new XElement(XName.Get("DnsServers", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                    foreach (NetworkSetConfigurationParameters.DnsServer dnsServersItem in parameters.DnsServers)
                    {
                        XElement dnsServerElement = new XElement(XName.Get("DnsServer", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                        dnsServersSequenceElement.Add(dnsServerElement);
                        
                        if (dnsServersItem.Name != null)
                        {
                            XAttribute nameAttribute = new XAttribute(XName.Get("name", ""), "");
                            nameAttribute.Value = dnsServersItem.Name;
                            dnsServerElement.Add(nameAttribute);
                        }
                        
                        XAttribute iPAddressAttribute = new XAttribute(XName.Get("IPAddress", ""), "");
                        iPAddressAttribute.Value = dnsServersItem.IPAddress;
                        dnsServerElement.Add(iPAddressAttribute);
                    }
                    dnsElement.Add(dnsServersSequenceElement);
                }
                
                if (parameters.LocalNetworkSites != null)
                {
                    XElement localNetworkSitesSequenceElement = new XElement(XName.Get("LocalNetworkSites", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                    foreach (NetworkSetConfigurationParameters.LocalNetworkSite localNetworkSitesItem in parameters.LocalNetworkSites)
                    {
                        XElement localNetworkSiteElement = new XElement(XName.Get("LocalNetworkSite", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                        localNetworkSitesSequenceElement.Add(localNetworkSiteElement);
                        
                        XAttribute nameAttribute2 = new XAttribute(XName.Get("name", ""), "");
                        nameAttribute2.Value = localNetworkSitesItem.Name;
                        localNetworkSiteElement.Add(nameAttribute2);
                        
                        if (localNetworkSitesItem.VpnGatewayAddress != null)
                        {
                            XElement vPNGatewayAddressElement = new XElement(XName.Get("VPNGatewayAddress", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                            vPNGatewayAddressElement.Value = localNetworkSitesItem.VpnGatewayAddress;
                            localNetworkSiteElement.Add(vPNGatewayAddressElement);
                        }
                        
                        if (localNetworkSitesItem.AddressSpace != null)
                        {
                            XElement addressSpaceSequenceElement = new XElement(XName.Get("AddressSpace", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                            foreach (string addressSpaceItem in localNetworkSitesItem.AddressSpace)
                            {
                                XElement addressSpaceItemElement = new XElement(XName.Get("AddressPrefix", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                                addressSpaceItemElement.Value = addressSpaceItem;
                                addressSpaceSequenceElement.Add(addressSpaceItemElement);
                            }
                            localNetworkSiteElement.Add(addressSpaceSequenceElement);
                        }
                    }
                    virtualNetworkConfigurationElement.Add(localNetworkSitesSequenceElement);
                }
                
                if (parameters.VirtualNetworkSites != null)
                {
                    XElement virtualNetworkSitesSequenceElement = new XElement(XName.Get("VirtualNetworkSites", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                    foreach (NetworkSetConfigurationParameters.VirtualNetworkSite virtualNetworkSitesItem in parameters.VirtualNetworkSites)
                    {
                        XElement virtualNetworkSiteElement = new XElement(XName.Get("VirtualNetworkSite", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                        virtualNetworkSitesSequenceElement.Add(virtualNetworkSiteElement);
                        
                        XAttribute nameAttribute3 = new XAttribute(XName.Get("name", ""), "");
                        nameAttribute3.Value = virtualNetworkSitesItem.Name;
                        virtualNetworkSiteElement.Add(nameAttribute3);
                        
                        if (virtualNetworkSitesItem.AffinityGroup != null)
                        {
                            XAttribute affinityGroupAttribute = new XAttribute(XName.Get("AffinityGroup", ""), "");
                            affinityGroupAttribute.Value = virtualNetworkSitesItem.AffinityGroup;
                            virtualNetworkSiteElement.Add(affinityGroupAttribute);
                        }
                        
                        XElement labelElement = new XElement(XName.Get("Label", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                        labelElement.Value = virtualNetworkSitesItem.Label;
                        virtualNetworkSiteElement.Add(labelElement);
                        
                        if (virtualNetworkSitesItem.Gateway != null)
                        {
                            XElement gatewayElement = new XElement(XName.Get("Gateway", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                            virtualNetworkSiteElement.Add(gatewayElement);
                            
                            XAttribute profileAttribute = new XAttribute(XName.Get("profile", ""), "");
                            profileAttribute.Value = virtualNetworkSitesItem.Gateway.Profile;
                            gatewayElement.Add(profileAttribute);
                            
                            if (virtualNetworkSitesItem.Gateway.VpnClientAddressPool != null)
                            {
                                XElement vPMClientAddressPoolSequenceElement = new XElement(XName.Get("VPMClientAddressPool", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                                foreach (string vPMClientAddressPoolItem in virtualNetworkSitesItem.Gateway.VpnClientAddressPool)
                                {
                                    XElement vPMClientAddressPoolItemElement = new XElement(XName.Get("AddressPrefix", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                                    vPMClientAddressPoolItemElement.Value = vPMClientAddressPoolItem;
                                    vPMClientAddressPoolSequenceElement.Add(vPMClientAddressPoolItemElement);
                                }
                                gatewayElement.Add(vPMClientAddressPoolSequenceElement);
                            }
                            
                            if (virtualNetworkSitesItem.Gateway.ConnectionsToLocalNetwork != null)
                            {
                                XElement connectionsToLocalNetworkSequenceElement = new XElement(XName.Get("ConnectionsToLocalNetwork", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                                foreach (NetworkSetConfigurationParameters.LocalNetworkSiteReference connectionsToLocalNetworkItem in virtualNetworkSitesItem.Gateway.ConnectionsToLocalNetwork)
                                {
                                    XElement localNetworkSiteRefElement = new XElement(XName.Get("LocalNetworkSiteRef", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                                    connectionsToLocalNetworkSequenceElement.Add(localNetworkSiteRefElement);
                                    
                                    XAttribute nameAttribute4 = new XAttribute(XName.Get("name", ""), "");
                                    nameAttribute4.Value = connectionsToLocalNetworkItem.Name;
                                    localNetworkSiteRefElement.Add(nameAttribute4);
                                    
                                    XElement connectionTypeElement = new XElement(XName.Get("ConnectionType", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                                    connectionTypeElement.Value = VirtualNetworkManagementClient.LocalNetworkConnectionTypeToString(connectionsToLocalNetworkItem.ConnectionType);
                                    localNetworkSiteRefElement.Add(connectionTypeElement);
                                }
                                gatewayElement.Add(connectionsToLocalNetworkSequenceElement);
                            }
                        }
                        
                        if (virtualNetworkSitesItem.DnsServerReferences != null)
                        {
                            XElement dnsServersRefSequenceElement = new XElement(XName.Get("DnsServersRef", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                            foreach (NetworkSetConfigurationParameters.DnsServerReference dnsServersRefItem in virtualNetworkSitesItem.DnsServerReferences)
                            {
                                XElement dnsServerRefElement = new XElement(XName.Get("DnsServerRef", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                                dnsServersRefSequenceElement.Add(dnsServerRefElement);
                                
                                XAttribute nameAttribute5 = new XAttribute(XName.Get("name", ""), "");
                                nameAttribute5.Value = dnsServersRefItem.Name;
                                dnsServerRefElement.Add(nameAttribute5);
                            }
                            virtualNetworkSiteElement.Add(dnsServersRefSequenceElement);
                        }
                        
                        if (virtualNetworkSitesItem.Subnets != null)
                        {
                            XElement subnetsSequenceElement = new XElement(XName.Get("Subnets", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                            foreach (NetworkSetConfigurationParameters.Subnet subnetsItem in virtualNetworkSitesItem.Subnets)
                            {
                                XElement subnetElement = new XElement(XName.Get("Subnet", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                                subnetsSequenceElement.Add(subnetElement);
                                
                                XAttribute nameAttribute6 = new XAttribute(XName.Get("name", ""), "");
                                nameAttribute6.Value = subnetsItem.Name;
                                subnetElement.Add(nameAttribute6);
                                
                                XElement addressPrefixElement = new XElement(XName.Get("AddressPrefix", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                                addressPrefixElement.Value = subnetsItem.AddressPrefix;
                                subnetElement.Add(addressPrefixElement);
                            }
                            virtualNetworkSiteElement.Add(subnetsSequenceElement);
                        }
                        
                        if (virtualNetworkSitesItem.AddressSpace != null)
                        {
                            XElement addressSpaceSequenceElement2 = new XElement(XName.Get("AddressSpace", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                            foreach (string addressSpaceItem2 in virtualNetworkSitesItem.AddressSpace)
                            {
                                XElement addressSpaceItemElement2 = new XElement(XName.Get("AddressPrefix", "http://schemas.microsoft.com/ServiceHosting/2011/07/NetworkConfiguration"));
                                addressSpaceItemElement2.Value = addressSpaceItem2;
                                addressSpaceSequenceElement2.Add(addressSpaceItemElement2);
                            }
                            virtualNetworkSiteElement.Add(addressSpaceSequenceElement2);
                        }
                    }
                    virtualNetworkConfigurationElement.Add(virtualNetworkSitesSequenceElement);
                }
                
                requestContent = requestDoc.ToString();
                requestContent = "<Binary>" + TypeConversion.ToBase64String(requestContent) + "</Binary>";
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/octet-stream");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
